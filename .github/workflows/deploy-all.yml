name: Deploy All Components

on:
  push:
    branches: [ main ]
    paths:
      - 'frontend/**'
      - 'public-tests/**'
      - 'backendV2/**'
      - 'shared/**'
      - '.github/workflows/deploy-all.yml'
  workflow_dispatch:
    inputs:
      deploy_frontend:
        description: 'Deploy Frontend'
        required: false
        default: true
        type: boolean
      deploy_public_tests:
        description: 'Deploy Public Tests'
        required: false
        default: true
        type: boolean
      deploy_backend:
        description: 'Deploy Backend'
        required: false
        default: true
        type: boolean

env:
  NODE_VERSION: '18'
  AWS_REGION: 'us-east-1'

jobs:
  # Detectar cambios
  detect-changes:
    runs-on: ubuntu-latest
    outputs:
      frontend-changed: ${{ steps.changes.outputs.frontend }}
      public-tests-changed: ${{ steps.changes.outputs.public-tests }}
      backend-changed: ${{ steps.changes.outputs.backend }}
      shared-changed: ${{ steps.changes.outputs.shared }}
    steps:
      - uses: actions/checkout@v4
      - uses: dorny/paths-filter@v2
        id: changes
        with:
          filters: |
            frontend:
              - 'frontend/**'
            public-tests:
              - 'public-tests/**'
            backend:
              - 'backendV2/**'
            shared:
              - 'shared/**'

  # Despliegue del Backend (primero porque otros dependen de √©l)
  deploy-backend:
    runs-on: ubuntu-latest
    needs: detect-changes
    if: |
      github.event_name == 'push' &&
      (needs.detect-changes.outputs.backend-changed == 'true' ||
       needs.detect-changes.outputs.shared-changed == 'true') &&
      (github.event.inputs.deploy_backend == 'true' || github.event.inputs.deploy_backend == '')
    steps:
      - name: Checkout code
        uses: actions/checkout@v4

      - name: Setup Node.js
        uses: actions/setup-node@v4
        with:
          node-version: ${{ env.NODE_VERSION }}
          cache: 'npm'

      - name: Configure AWS credentials
        uses: aws-actions/configure-aws-credentials@v4
        with:
          aws-access-key-id: ${{ secrets.AWS_ACCESS_KEY_ID }}
          aws-secret-access-key: ${{ secrets.AWS_SECRET_ACCESS_KEY }}
          aws-region: ${{ env.AWS_REGION }}

      - name: Deploy Backend
        run: |
          cd backendV2
          npm ci
          npm run deploy
        env:
          STAGE: dev
          AWS_REGION: ${{ env.AWS_REGION }}

            - name: Export endpoints
        run: |
          cd backendV2
          npm run export-endpoints
          npx ts-node src/utils/endpoints-exporter.ts ../frontend/src/api/endpoints.js
          npx ts-node src/utils/endpoints-exporter.ts ../public-tests/src/config/endpoints.js

      - name: Update endpoints in all deployments
        run: |
          echo "üîÑ Actualizando endpoints en todos los despliegues activos..."
          chmod +x scripts/update-endpoints-all-deployments.sh
          ./scripts/update-endpoints-all-deployments.sh
        env:
          STAGE: dev
          AWS_REGION: ${{ env.AWS_REGION }}
          VERCEL_TOKEN: ${{ secrets.VERCEL_TOKEN }}
          VERCEL_ORG_ID: ${{ secrets.VERCEL_ORG_ID }}
          VERCEL_PROJECT_ID: ${{ secrets.VERCEL_PROJECT_ID }}
          VERCEL_PUBLIC_TESTS_PROJECT_ID: ${{ secrets.VERCEL_PUBLIC_TESTS_PROJECT_ID }}
          AMPLIFY_FRONTEND_APP_ID: ${{ secrets.AMPLIFY_FRONTEND_APP_ID }}
          AMPLIFY_PUBLIC_TESTS_APP_ID: ${{ secrets.AMPLIFY_PUBLIC_TESTS_APP_ID }}
          CLOUDFRONT_FRONTEND_DIST_ID: ${{ secrets.CLOUDFRONT_FRONTEND_DIST_ID }}
          CLOUDFRONT_PUBLIC_TESTS_DIST_ID: ${{ secrets.CLOUDFRONT_PUBLIC_TESTS_DIST_ID }}
          FRONTEND_S3_BUCKET: ${{ secrets.FRONTEND_S3_BUCKET }}
          PUBLIC_TESTS_S3_BUCKET: ${{ secrets.PUBLIC_TESTS_S3_BUCKET }}
          EC2_FRONTEND_URL: ${{ secrets.EC2_FRONTEND_URL }}
          EC2_API_ENDPOINT: ${{ secrets.EC2_API_ENDPOINT }}
          WEBHOOK_URL: ${{ secrets.WEBHOOK_URL }}

      - name: Get API endpoints
        id: get-endpoints
        run: |
          cd backendV2
          HTTP_ENDPOINT=$(aws cloudformation describe-stacks --stack-name emotioxv2-backend-dev --query 'Stacks[0].Outputs[?OutputKey==`HttpApiUrl`].OutputValue' --output text)
          WS_ENDPOINT=$(aws cloudformation describe-stacks --stack-name emotioxv2-backend-dev --query 'Stacks[0].Outputs[?OutputKey==`WebsocketApiUrl`].OutputValue' --output text)

          echo "HTTP_ENDPOINT=$HTTP_ENDPOINT" >> $GITHUB_ENV
          echo "WS_ENDPOINT=$WS_ENDPOINT" >> $GITHUB_ENV

  # Despliegue del Frontend
  deploy-frontend:
    runs-on: ubuntu-latest
    needs: [detect-changes, deploy-backend]
    if: |
      github.event_name == 'push' &&
      (needs.detect-changes.outputs.frontend-changed == 'true' ||
       needs.detect-changes.outputs.shared-changed == 'true') &&
      (github.event.inputs.deploy_frontend == 'true' || github.event.inputs.deploy_frontend == '')
    steps:
      - name: Checkout code
        uses: actions/checkout@v4

      - name: Setup Node.js
        uses: actions/setup-node@v4
        with:
          node-version: ${{ env.NODE_VERSION }}
          cache: 'npm'

      - name: Install dependencies
        run: |
          cd frontend
          npm ci --legacy-peer-deps

      - name: Build and deploy to Vercel
        uses: amondnet/vercel-action@v25
        with:
          vercel-token: ${{ secrets.VERCEL_TOKEN }}
          vercel-org-id: ${{ secrets.VERCEL_ORG_ID }}
          vercel-project-id: ${{ secrets.VERCEL_PROJECT_ID }}
          working-directory: ./frontend
          vercel-args: '--prod'
        env:
          NODE_ENV: production
          NEXT_PUBLIC_API_URL: ${{ env.HTTP_ENDPOINT }}
          NEXT_PUBLIC_PUBLIC_TESTS_URL: ${{ secrets.NEXT_PUBLIC_PUBLIC_TESTS_URL }}

  # Despliegue de Public Tests
  deploy-public-tests:
    runs-on: ubuntu-latest
    needs: [detect-changes, deploy-backend]
    if: |
      github.event_name == 'push' &&
      (needs.detect-changes.outputs.public-tests-changed == 'true' ||
       needs.detect-changes.outputs.shared-changed == 'true') &&
      (github.event.inputs.deploy_public_tests == 'true' || github.event.inputs.deploy_public_tests == '')
    steps:
      - name: Checkout code
        uses: actions/checkout@v4

      - name: Setup Node.js
        uses: actions/setup-node@v4
        with:
          node-version: ${{ env.NODE_VERSION }}
          cache: 'npm'

      - name: Install dependencies
        run: |
          cd public-tests
          npm ci

      - name: Build and deploy to Vercel
        uses: amondnet/vercel-action@v25
        with:
          vercel-token: ${{ secrets.VERCEL_TOKEN }}
          vercel-org-id: ${{ secrets.VERCEL_ORG_ID }}
          vercel-project-id: ${{ secrets.VERCEL_PUBLIC_TESTS_PROJECT_ID }}
          working-directory: ./public-tests
          vercel-args: '--prod'
        env:
          NODE_ENV: production
          VITE_API_URL: ${{ env.HTTP_ENDPOINT }}
          VITE_PUBLIC_TESTS_URL: ${{ secrets.VITE_PUBLIC_TESTS_URL }}

  # Resumen final
  deployment-summary:
    runs-on: ubuntu-latest
    needs: [deploy-backend, deploy-frontend, deploy-public-tests]
    if: always() && github.event_name == 'push' && github.ref == 'refs/heads/main'
    steps:
      - name: Deployment Summary
        run: |
          echo "üéØ EmotioXV2 Deployment Summary"
          echo "=================================="
          echo "Backend: ${{ needs.deploy-backend.result }}"
          echo "Frontend: ${{ needs.deploy-frontend.result }}"
          echo "Public Tests: ${{ needs.deploy-public-tests.result }}"
          echo ""

          if [ "${{ needs.deploy-backend.result }}" == "success" ]; then
            echo "‚úÖ Backend deployed successfully!"
            echo "üåê HTTP API: ${{ env.HTTP_ENDPOINT }}"
            echo "üîå WebSocket API: ${{ env.WS_ENDPOINT }}"
          fi

          if [ "${{ needs.deploy-frontend.result }}" == "success" ]; then
            echo "‚úÖ Frontend deployed successfully!"
            echo "üåê URL: https://emotioxv2-frontend.vercel.app"
          fi

          if [ "${{ needs.deploy-public-tests.result }}" == "success" ]; then
            echo "‚úÖ Public Tests deployed successfully!"
            echo "üåê URL: https://emotioxv2-public-tests.vercel.app"
          fi

          echo ""
          echo "üìä Overall Status:"
          if [ "${{ needs.deploy-backend.result }}" == "success" ] && [ "${{ needs.deploy-frontend.result }}" == "success" ] && [ "${{ needs.deploy-public-tests.result }}" == "success" ]; then
            echo "üéâ All components deployed successfully!"
          else
            echo "‚ö†Ô∏è Some deployments failed. Check the logs above."
            exit 1
          fi
