name: Deploy Backend

on:
  push:
    branches: [ main, develop ]
    paths:
      - 'backendV2/**'
      - 'shared/**'
      - '.github/workflows/deploy-backend.yml'
  pull_request:
    branches: [ main ]
    paths:
      - 'backendV2/**'
      - 'shared/**'
  workflow_dispatch:
    inputs:
      environment:
        description: 'Environment to deploy to'
        required: true
        default: 'dev'
        type: choice
        options:
          - dev
          - staging
          - prod

env:
  NODE_VERSION: '18'
  AWS_REGION: 'us-east-1'

jobs:
  # Detectar cambios
  detect-changes:
    runs-on: ubuntu-latest
    outputs:
      backend-changed: ${{ steps.changes.outputs.backend }}
      shared-changed: ${{ steps.changes.outputs.shared }}
    steps:
      - uses: actions/checkout@v4
      - uses: dorny/paths-filter@v2
        id: changes
        with:
          filters: |
            backend:
              - 'backendV2/**'
            shared:
              - 'shared/**'

  # Tests y validaci√≥n
  test-backend:
    runs-on: ubuntu-latest
    needs: detect-changes
    if: github.event_name == 'push' && (needs.detect-changes.outputs.backend-changed == 'true' || needs.detect-changes.outputs.shared-changed == 'true')
    steps:
      - name: Checkout code
        uses: actions/checkout@v4

      - name: Setup Node.js
        uses: actions/setup-node@v4
        with:
          node-version: ${{ env.NODE_VERSION }}
          cache: 'npm'

      - name: Install dependencies
        run: |
          cd backendV2
          npm ci

      - name: Run tests
        run: |
          cd backendV2
          npm test
        env:
          NODE_ENV: test

      - name: TypeScript check
        run: |
          cd backendV2
          npx tsc --noEmit

  # Despliegue del backend
  deploy-backend:
    runs-on: ubuntu-latest
    needs: [detect-changes, test-backend]
    if: github.ref == 'refs/heads/main' && github.event_name == 'push'
    steps:
      - name: Checkout code
        uses: actions/checkout@v4

      - name: Setup Node.js
        uses: actions/setup-node@v4
        with:
          node-version: ${{ env.NODE_VERSION }}
          cache: 'npm'

      - name: Configure AWS credentials
        uses: aws-actions/configure-aws-credentials@v4
        with:
          aws-access-key-id: ${{ secrets.AWS_ACCESS_KEY_ID }}
          aws-secret-access-key: ${{ secrets.AWS_SECRET_ACCESS_KEY }}
          aws-region: ${{ env.AWS_REGION }}

      - name: Install dependencies
        run: |
          cd backendV2
          npm ci

      - name: Deploy to AWS Lambda
        run: |
          cd backendV2
          npm run deploy
        env:
          STAGE: dev
          AWS_REGION: ${{ env.AWS_REGION }}

      - name: Export endpoints
        run: |
          cd backendV2
          npm run export-endpoints
          npx ts-node src/utils/endpoints-exporter.ts ../frontend/src/api/endpoints.js
          npx ts-node src/utils/endpoints-exporter.ts ../public-tests/src/config/endpoints.js

  # Verificaci√≥n post-despliegue
  verify-deployment:
    runs-on: ubuntu-latest
    needs: deploy-backend
    if: github.ref == 'refs/heads/main' && github.event_name == 'push'
    steps:
      - name: Configure AWS credentials
        uses: aws-actions/configure-aws-credentials@v4
        with:
          aws-access-key-id: ${{ secrets.AWS_ACCESS_KEY_ID }}
          aws-secret-access-key: ${{ secrets.AWS_SECRET_ACCESS_KEY }}
          aws-region: ${{ env.AWS_REGION }}

      - name: Get API endpoints
        id: get-endpoints
        run: |
          cd backendV2
          HTTP_ENDPOINT=$(aws cloudformation describe-stacks --stack-name emotioxv2-backend-dev --query 'Stacks[0].Outputs[?OutputKey==`HttpApiUrl`].OutputValue' --output text)
          WS_ENDPOINT=$(aws cloudformation describe-stacks --stack-name emotioxv2-backend-dev --query 'Stacks[0].Outputs[?OutputKey==`WebsocketApiUrl`].OutputValue' --output text)

          echo "HTTP_ENDPOINT=$HTTP_ENDPOINT" >> $GITHUB_ENV
          echo "WS_ENDPOINT=$WS_ENDPOINT" >> $GITHUB_ENV

          echo "HTTP API: $HTTP_ENDPOINT"
          echo "WebSocket API: $WS_ENDPOINT"

      - name: Test API endpoints
        run: |
          echo "Testing HTTP API..."
          curl -f "$HTTP_ENDPOINT/health" || echo "HTTP API health check failed"

          echo "Testing WebSocket API..."
          curl -f "$WS_ENDPOINT" || echo "WebSocket API check failed"

  # Notificaci√≥n de despliegue
  notify:
    runs-on: ubuntu-latest
    needs: [deploy-backend, verify-deployment]
    if: always() && github.event_name == 'push' && github.ref == 'refs/heads/main'
    steps:
      - name: Deployment Summary
        run: |
          echo "üéØ Backend Deployment Summary:"
          echo "Deploy: ${{ needs.deploy-backend.result }}"
          echo "Verify: ${{ needs.verify-deployment.result }}"

          if [ "${{ needs.deploy-backend.result }}" == "success" ] && [ "${{ needs.verify-deployment.result }}" == "success" ]; then
            echo "‚úÖ Backend deployed and verified successfully!"
            echo "üåê HTTP API: ${{ env.HTTP_ENDPOINT }}"
            echo "üîå WebSocket API: ${{ env.WS_ENDPOINT }}"
          else
            echo "‚ùå Backend deployment or verification failed!"
            exit 1
          fi
