name: 🚀 Deploy Public Tests to S3/CloudFront

on:
  push:
    branches: [main, develop]
    paths:
      - 'public-tests/**'
      - '.github/workflows/deploy-public-tests-s3.yml'
  workflow_dispatch:
    inputs:
      environment:
        description: 'Environment to deploy to'
        required: true
        default: 'staging'
        type: choice
        options:
        - staging
        - production

env:
  NODE_VERSION: '20'
  BUCKET: ${{ secrets.PUBLIC_TESTS_S3_BUCKET }}
  REGION: ${{ secrets.AWS_DEFAULT_REGION || 'us-east-1' }}
  CLOUDFRONT_DISTRIBUTION_ID: ${{ secrets.PUBLIC_TESTS_CLOUDFRONT_DISTRIBUTION_ID }}

jobs:
  deploy:
    name: 🚀 Deploy to S3/CloudFront
    runs-on: ubuntu-latest

    steps:
      - name: 📥 Checkout code
        uses: actions/checkout@v4
        with:
          fetch-depth: 0

      - name: 🔧 Setup Node.js
        uses: actions/setup-node@v4
        with:
          node-version: ${{ env.NODE_VERSION }}
          cache: 'npm'

      - name: 📦 Install dependencies
        run: |
          cd public-tests
          npm install --ignore-scripts --prefer-offline --no-audit
        env:
          NODE_ENV: production

      - name: 🔍 Verify environment variables
        run: |
          echo "🔍 Verificando variables de entorno..."
          echo "BUCKET: ${{ env.BUCKET }}"
          echo "REGION: ${{ env.REGION }}"
          echo "CLOUDFRONT_DISTRIBUTION_ID: ${{ env.CLOUDFRONT_DISTRIBUTION_ID }}"

          if [ -z "${{ env.BUCKET }}" ]; then
            echo "❌ Error: BUCKET no está definido"
            exit 1
          fi

          if [ -z "${{ env.CLOUDFRONT_DISTRIBUTION_ID }}" ]; then
            echo "❌ Error: CLOUDFRONT_DISTRIBUTION_ID no está definido"
            exit 1
          fi

      - name: 🏗️ Build application
        run: |
          cd public-tests
          echo "🏗️ Construyendo aplicación..."
          npm run build
        env:
          VITE_API_BASE_URL: ${{ secrets.VITE_API_BASE_URL }}
          VITE_PUBLIC_TESTS_URL: ${{ secrets.VITE_PUBLIC_TESTS_URL }}
          NODE_ENV: production

      - name: 🔍 Verify build output
        run: |
          cd public-tests
          echo "🔍 Verificando build..."
          ls -la dist/

          if [ ! -f "dist/index.html" ]; then
            echo "❌ Error: index.html no encontrado en dist/"
            exit 1
          fi

          echo "✅ Build verificado correctamente"

      - name: 🔧 Configure AWS credentials
        uses: aws-actions/configure-aws-credentials@v4
        with:
          aws-access-key-id: ${{ secrets.AWS_ACCESS_KEY_ID }}
          aws-secret-access-key: ${{ secrets.AWS_SECRET_ACCESS_KEY }}
          aws-region: ${{ env.REGION }}

      - name: 🚀 Deploy to S3
        run: |
          echo "🚀 Iniciando despliegue a S3..."
          ./scripts/deploy/deploy-public-tests.sh
        env:
          BUCKET: ${{ env.BUCKET }}
          REGION: ${{ env.REGION }}
          CLOUDFRONT_DISTRIBUTION_ID: ${{ env.CLOUDFRONT_DISTRIBUTION_ID }}

      - name: 🔍 Verify deployment
        run: |
          echo "🔍 Verificando despliegue..."

          # Verificar archivos principales
          aws s3 ls s3://${{ env.BUCKET }}/index.html --region ${{ env.REGION }} || {
            echo "❌ Error: index.html no encontrado en S3"
            exit 1
          }

          # Verificar endpoints dinámicos
          aws s3 ls s3://${{ env.BUCKET }}/config/endpoints.js --region ${{ env.REGION }} || {
            echo "⚠️ Warning: endpoints.js no encontrado en S3"
          }

          echo "✅ Despliegue verificado correctamente"

      - name: 🌐 Test CloudFront accessibility
        run: |
          echo "🌐 Probando accesibilidad de CloudFront..."

          # Obtener dominio de CloudFront
          CLOUDFRONT_DOMAIN=$(aws cloudfront get-distribution \
            --id ${{ env.CLOUDFRONT_DISTRIBUTION_ID }} \
            --region ${{ env.REGION }} \
            --query 'Distribution.DomainName' \
            --output text)

          echo "CloudFront Domain: $CLOUDFRONT_DOMAIN"

          # Esperar un poco para que la invalidación se propague
          sleep 30

          # Probar acceso
          curl -I "https://$CLOUDFRONT_DOMAIN" || {
            echo "⚠️ Warning: No se pudo verificar CloudFront (puede ser normal durante invalidación)"
          }

      - name: 📊 Deployment summary
        run: |
          echo "## 🚀 Despliegue Completado" >> $GITHUB_STEP_SUMMARY
          echo "" >> $GITHUB_STEP_SUMMARY
          echo "**Bucket S3:** ${{ env.BUCKET }}" >> $GITHUB_STEP_SUMMARY
          echo "**Región:** ${{ env.REGION }}" >> $GITHUB_STEP_SUMMARY
          echo "**CloudFront Distribution ID:** ${{ env.CLOUDFRONT_DISTRIBUTION_ID }}" >> $GITHUB_STEP_SUMMARY
          echo "" >> $GITHUB_STEP_SUMMARY
          echo "### 📋 Checklist:" >> $GITHUB_STEP_SUMMARY
          echo "- [x] Build completado" >> $GITHUB_STEP_SUMMARY
          echo "- [x] Archivos subidos a S3" >> $GITHUB_STEP_SUMMARY
          echo "- [x] Endpoints dinámicos copiados" >> $GITHUB_STEP_SUMMARY
          echo "- [x] Caché de CloudFront invalidado" >> $GITHUB_STEP_SUMMARY
          echo "" >> $GITHUB_STEP_SUMMARY
          echo "### 🔗 URLs:" >> $GITHUB_STEP_SUMMARY
          echo "- **S3:** https://${{ env.BUCKET }}.s3.${{ env.REGION }}.amazonaws.com" >> $GITHUB_STEP_SUMMARY
          echo "- **CloudFront:** https://$CLOUDFRONT_DOMAIN" >> $GITHUB_STEP_SUMMARY

      - name: 🎉 Success notification
        if: success()
        run: |
          echo "🎉 ¡Despliegue completado exitosamente!"
          echo "📅 Timestamp: $(date)"
          echo "🔄 Commit: ${{ github.sha }}"
          echo "👤 Autor: ${{ github.actor }}"

  notify:
    name: 📢 Notify deployment status
    runs-on: ubuntu-latest
    needs: deploy
    if: always()

    steps:
      - name: 📢 Notify success
        if: needs.deploy.result == 'success'
        run: |
          echo "✅ Despliegue de public-tests a S3/CloudFront completado exitosamente"
          echo "🔗 URL: https://${{ env.CLOUDFRONT_DISTRIBUTION_ID }}.cloudfront.net"

      - name: 📢 Notify failure
        if: needs.deploy.result == 'failure'
        run: |
          echo "❌ Despliegue de public-tests a S3/CloudFront falló"
          echo "🔍 Revisar logs para más detalles"
