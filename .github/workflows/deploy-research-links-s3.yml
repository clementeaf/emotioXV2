name: Deploy Research Links to AWS S3

on:
  push:
    branches:
      - main
      - develop
    paths:
      - 'researchLinks/**'
      - '.github/workflows/deploy-research-links-s3.yml'
  workflow_dispatch:
    inputs:
      environment:
        description: 'Environment to deploy to'
        required: true
        default: 'dev'
        type: choice
        options:
          - dev
          - test
          - prod

jobs:
  build-and-deploy:
    name: Build and Deploy Research Links
    runs-on: ubuntu-latest
    environment: ${{ github.event.inputs.environment || (github.ref == 'refs/heads/main' && 'prod' || 'dev') }}
    
    steps:
      - name: Checkout code
        uses: actions/checkout@v4
        with:
          fetch-depth: 0
      
      - name: Setup Node.js
        uses: actions/setup-node@v4
        with:
          node-version: '18'
          cache: 'npm'
          cache-dependency-path: 'researchLinks/package-lock.json'
      
      - name: Install dependencies
        working-directory: researchLinks
        run: npm ci
      
      - name: Set environment variables
        id: set-env
        run: |
          STAGE="${{ github.event.inputs.environment || (github.ref == 'refs/heads/main' && 'prod' || 'dev') }}"
          echo "STAGE=${STAGE}" >> $GITHUB_ENV
          echo "S3_BUCKET=emotioxv2-research-links-${STAGE}" >> $GITHUB_ENV
          echo "CLOUDFRONT_DISTRIBUTION_ID=${{ secrets.RESEARCH_LINKS_CLOUDFRONT_DISTRIBUTION_ID_DEV }}" >> $GITHUB_ENV
          
          if [ "$STAGE" = "prod" ]; then
            echo "CLOUDFRONT_DISTRIBUTION_ID=${{ secrets.RESEARCH_LINKS_CLOUDFRONT_DISTRIBUTION_ID_PROD }}" >> $GITHUB_ENV
          fi
      
      - name: Configure environment file
        run: |
          cat > researchLinks/.env << EOF
          VITE_STAGE=${{ env.STAGE }}
          VITE_API_BASE_URL=${{ secrets.API_BASE_URL }}
          VITE_AUTH_API_URL=${{ secrets.API_BASE_URL }}/auth
          VITE_RESEARCH_API_URL=${{ secrets.API_BASE_URL }}/research
          VITE_WEBSOCKET_URL=${{ secrets.WEBSOCKET_URL }}
          EOF
      
      - name: Build
        working-directory: researchLinks
        run: npm run build
        env:
          CI: false
      
      - name: Verify build output
        run: |
          cd researchLinks
          echo "Verifying build output..."
          ls -la dist/
          
          if [ ! -f "dist/index.html" ]; then
            echo "Error: index.html not found in dist/"
            exit 1
          fi
          
          echo "Build verified successfully"
      
      - name: Configure AWS credentials
        uses: aws-actions/configure-aws-credentials@v4
        with:
          aws-access-key-id: ${{ secrets.AWS_ACCESS_KEY_ID }}
          aws-secret-access-key: ${{ secrets.AWS_SECRET_ACCESS_KEY }}
          aws-region: ${{ secrets.AWS_REGION || 'us-east-1' }}
      
      - name: Deploy to S3
        run: |
          echo "Deploying to S3 bucket: ${{ env.S3_BUCKET }}"
          aws s3 sync researchLinks/dist s3://${{ env.S3_BUCKET }} \
            --delete \
            --cache-control "public, max-age=31536000" \
            --exclude "index.html" \
            --exclude "*.json"
          
          # Upload HTML and JSON files with different cache settings
          aws s3 cp researchLinks/dist/index.html s3://${{ env.S3_BUCKET }}/index.html \
            --cache-control "no-cache, no-store, must-revalidate"
          
          # Upload any JSON files
          find researchLinks/dist -name "*.json" -type f | while read file; do
            relative_path=${file#researchLinks/dist/}
            aws s3 cp "$file" "s3://${{ env.S3_BUCKET }}/$relative_path" \
              --cache-control "no-cache, no-store, must-revalidate"
          done
      
      - name: Invalidate CloudFront cache
        run: |
          echo "Invalidating CloudFront distribution: ${{ env.CLOUDFRONT_DISTRIBUTION_ID }}"
          aws cloudfront create-invalidation \
            --distribution-id ${{ env.CLOUDFRONT_DISTRIBUTION_ID }} \
            --paths "/*"
      
      - name: Verify deployment
        run: |
          echo "Verifying deployment..."
          
          # Verify main files
          aws s3 ls s3://${{ env.S3_BUCKET }}/index.html || {
            echo "Error: index.html not found in S3"
            exit 1
          }
          
          # List all deployed files
          echo "Deployed files:"
          aws s3 ls s3://${{ env.S3_BUCKET }}/ --recursive
          
          echo "Deployment verified successfully"
      
      - name: Generate deployment URL
        id: deployment-url
        run: |
          if [ "${{ env.STAGE }}" = "prod" ]; then
            echo "DEPLOYMENT_URL=${{ secrets.PROD_RESEARCH_LINKS_URL }}" >> $GITHUB_ENV
          else
            echo "DEPLOYMENT_URL=${{ secrets.DEV_RESEARCH_LINKS_URL }}" >> $GITHUB_ENV
          fi
          
          # Get CloudFront domain
          CLOUDFRONT_DOMAIN=$(aws cloudfront get-distribution \
            --id ${{ env.CLOUDFRONT_DISTRIBUTION_ID }} \
            --query 'Distribution.DomainName' \
            --output text)
          
          echo "CLOUDFRONT_DOMAIN=${CLOUDFRONT_DOMAIN}" >> $GITHUB_ENV
      
      - name: Deployment summary
        run: |
          echo "## Research Links Deployment Completed" >> $GITHUB_STEP_SUMMARY
          echo "" >> $GITHUB_STEP_SUMMARY
          echo "**Environment:** ${{ env.STAGE }}" >> $GITHUB_STEP_SUMMARY
          echo "**S3 Bucket:** ${{ env.S3_BUCKET }}" >> $GITHUB_STEP_SUMMARY
          echo "**CloudFront Distribution ID:** ${{ env.CLOUDFRONT_DISTRIBUTION_ID }}" >> $GITHUB_STEP_SUMMARY
          echo "" >> $GITHUB_STEP_SUMMARY
          echo "### URLs:" >> $GITHUB_STEP_SUMMARY
          echo "- **CloudFront:** https://${{ env.CLOUDFRONT_DOMAIN }}" >> $GITHUB_STEP_SUMMARY
          if [ ! -z "${{ env.DEPLOYMENT_URL }}" ]; then
            echo "- **Custom Domain:** ${{ env.DEPLOYMENT_URL }}" >> $GITHUB_STEP_SUMMARY
          fi
          echo "" >> $GITHUB_STEP_SUMMARY
          echo "### Deployment Details:" >> $GITHUB_STEP_SUMMARY
          echo "- Commit: ${{ github.sha }}" >> $GITHUB_STEP_SUMMARY
          echo "- Branch: ${{ github.ref_name }}" >> $GITHUB_STEP_SUMMARY
          echo "- Triggered by: ${{ github.actor }}" >> $GITHUB_STEP_SUMMARY
          echo "- Timestamp: $(date)" >> $GITHUB_STEP_SUMMARY
      
      - name: Notify deployment success
        if: success()
        uses: rtCamp/action-slack-notify@v2
        env:
          SLACK_WEBHOOK: ${{ secrets.SLACK_WEBHOOK }}
          SLACK_CHANNEL: deployments
          SLACK_TITLE: "Research Links Deployment Successful"
          SLACK_MESSAGE: "Research Links has been deployed to ${{ env.STAGE }} environment. Available at: https://${{ env.CLOUDFRONT_DOMAIN }}"
          SLACK_COLOR: good
          SLACK_FOOTER: "EmotioXV2 CI/CD Pipeline"
        continue-on-error: true
      
      - name: Notify deployment failure
        if: failure()
        uses: rtCamp/action-slack-notify@v2
        env:
          SLACK_WEBHOOK: ${{ secrets.SLACK_WEBHOOK }}
          SLACK_CHANNEL: deployments
          SLACK_TITLE: "Research Links Deployment Failed"
          SLACK_MESSAGE: "Research Links deployment to ${{ env.STAGE }} environment failed"
          SLACK_COLOR: danger
          SLACK_FOOTER: "EmotioXV2 CI/CD Pipeline"
        continue-on-error: true