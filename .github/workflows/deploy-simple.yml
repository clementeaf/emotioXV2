name: Deploy Simple (Fixed)

on:
  # Disabled - redundant with Deploy Frontend to S3/CloudFront
  # push:
  #   branches: [ main ]
  #   paths:
  #     - 'frontend/**'
  #     - 'public-tests/**'
  #     - 'backendV2/**'
  workflow_dispatch:

env:
  NODE_VERSION: '20'
  AWS_REGION: 'us-east-1'

jobs:
  # Deploy Backend
  deploy-backend:
    runs-on: ubuntu-latest
    steps:
      - name: Checkout code
        uses: actions/checkout@v4

      - name: Setup Node.js
        uses: actions/setup-node@v4
        with:
          node-version: ${{ env.NODE_VERSION }}
          cache: 'npm'
          cache-dependency-path: backendV2/package-lock.json

      - name: Configure AWS credentials
        uses: aws-actions/configure-aws-credentials@v4
        with:
          aws-access-key-id: ${{ secrets.AWS_ACCESS_KEY_ID }}
          aws-secret-access-key: ${{ secrets.AWS_SECRET_ACCESS_KEY }}
          aws-region: ${{ env.AWS_REGION }}

      - name: Deploy Backend
        run: |
          cd backendV2
          npm ci
          npm run deploy
        env:
          STAGE: dev
          AWS_REGION: ${{ env.AWS_REGION }}

      - name: Export endpoints
        run: |
          cd backendV2
          npm run export-endpoints || echo "Export endpoints failed, continuing..."
          if [ -f "../frontend/src/api/endpoints.js" ]; then
            echo "Frontend endpoints exported successfully"
          fi
          if [ -f "../public-tests/src/config/endpoints.js" ]; then
            echo "Public-tests endpoints exported successfully"
          fi

  # Deploy Public Tests to S3
  deploy-public-tests:
    runs-on: ubuntu-latest
    needs: deploy-backend
    steps:
      - name: Checkout code
        uses: actions/checkout@v4

      - name: Setup Node.js
        uses: actions/setup-node@v4
        with:
          node-version: ${{ env.NODE_VERSION }}
          cache: 'npm'
          cache-dependency-path: package-lock.json

      - name: Configure AWS credentials
        uses: aws-actions/configure-aws-credentials@v4
        with:
          aws-access-key-id: ${{ secrets.AWS_ACCESS_KEY_ID }}
          aws-secret-access-key: ${{ secrets.AWS_SECRET_ACCESS_KEY }}
          aws-region: ${{ env.AWS_REGION }}

      - name: Install and build public-tests
        run: |
          cd public-tests
          npm ci
          npm run build

      - name: Deploy to S3
        run: |
          cd public-tests
          aws s3 sync dist/ s3://${{ secrets.PUBLIC_TESTS_S3_BUCKET }}/ --delete --region ${{ env.AWS_REGION }}
          
      - name: Invalidate CloudFront
        run: |
          aws cloudfront create-invalidation \
            --distribution-id ${{ secrets.PUBLIC_TESTS_CLOUDFRONT_DISTRIBUTION_ID }} \
            --paths "/*" \
            --region ${{ env.AWS_REGION }}

  # Deploy Frontend (if Amplify is configured)
  deploy-frontend:
    runs-on: ubuntu-latest
    needs: deploy-backend
    if: vars.SKIP_FRONTEND_DEPLOY != 'true'
    steps:
      - name: Checkout code
        uses: actions/checkout@v4

      - name: Setup Node.js
        uses: actions/setup-node@v4
        with:
          node-version: ${{ env.NODE_VERSION }}
          cache: 'npm'
          cache-dependency-path: package-lock.json

      - name: Configure AWS credentials
        uses: aws-actions/configure-aws-credentials@v4
        with:
          aws-access-key-id: ${{ secrets.AWS_ACCESS_KEY_ID }}
          aws-secret-access-key: ${{ secrets.AWS_SECRET_ACCESS_KEY }}
          aws-region: ${{ env.AWS_REGION }}

      - name: Install frontend dependencies
        run: |
          cd frontend
          npm ci --legacy-peer-deps

      - name: Build frontend
        run: |
          cd frontend
          npm run build

      - name: Deploy to S3 (if configured)
        run: |
          if [ -n "${{ secrets.FRONTEND_S3_BUCKET }}" ]; then
            cd frontend
            if [ -d "out" ]; then
              aws s3 sync out/ s3://${{ secrets.FRONTEND_S3_BUCKET }}/ --delete --region ${{ env.AWS_REGION }}
              echo "Frontend deployed to S3 successfully"
            elif [ -d ".next" ]; then
              aws s3 sync .next/static/ s3://${{ secrets.FRONTEND_S3_BUCKET }}/_next/static/ --region ${{ env.AWS_REGION }}
              echo "Frontend static assets deployed to S3"
            else
              echo "No build output found (out/ or .next/), skipping S3 deployment"
            fi
          else
            echo "Frontend S3 bucket not configured, skipping S3 deployment"
          fi

  # Summary
  deployment-summary:
    runs-on: ubuntu-latest
    needs: [deploy-backend, deploy-public-tests, deploy-frontend]
    if: always()
    steps:
      - name: Deployment Summary
        run: |
          echo "üéØ EmotioXV2 Deployment Summary (Simplified)"
          echo "============================================"
          echo "Backend: ${{ needs.deploy-backend.result }}"
          echo "Public Tests: ${{ needs.deploy-public-tests.result }}"
          echo "Frontend: ${{ needs.deploy-frontend.result }}"
          echo ""
          
          if [ "${{ needs.deploy-backend.result }}" == "success" ]; then
            echo "‚úÖ Backend deployed successfully!"
          else
            echo "‚ùå Backend deployment failed"
          fi
          
          if [ "${{ needs.deploy-public-tests.result }}" == "success" ]; then
            echo "‚úÖ Public Tests deployed successfully!"
          else
            echo "‚ùå Public Tests deployment failed"
          fi
          
          if [ "${{ needs.deploy-frontend.result }}" == "success" ]; then
            echo "‚úÖ Frontend deployed successfully!"
          elif [ "${{ needs.deploy-frontend.result }}" == "skipped" ]; then
            echo "‚è≠Ô∏è Frontend deployment skipped"
          else
            echo "‚ùå Frontend deployment failed"
          fi