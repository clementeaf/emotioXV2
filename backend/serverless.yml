service: emotio-x-backend-v2

frameworkVersion: '3'

plugins:
  - serverless-offline
  - serverless-dotenv-plugin
  - serverless-export-outputs
  - serverless-dynamodb-local

custom:
  # Configuración de DynamoDB Local
  dynamodb:
    stages:
      - dev
      - local
    start:
      port: 8000
      inMemory: true
      migrate: true
  
  # Configuración de exportación de salidas
  exportOutputs:
    include:
      - HttpApiUrl
      - WebSocketApiUrl
    output:
      file: ./outputs.json
  
  # Configuración de Serverless Offline
  serverless-offline:
    httpPort: 4000
    noPrependStageInUrl: true
    useChildProcesses: true
  
  # Nombre de la tabla de Welcome Screen
  welcomeScreenTableName: ${self:service}-welcome-screen-${self:provider.stage}

package:
  individually: true
  excludeDevDependencies: true
  patterns:
    - '!node_modules/aws-sdk/**'
    - '!node_modules/@aws-sdk/**'
    - '!**/*.ts'
    - '!.git/**'
    - '!.vscode/**'
    - '!.serverless/**'
    - '!.build/**'
    - '!.dist/**/*.ts'
    - '.dist/**'
    - 'package.json'

provider:
  name: aws
  runtime: nodejs18.x
  stage: ${opt:stage, 'dev'}
  region: us-east-1
  environment:
    USERS_TABLE: ${self:service}-${self:provider.stage}-users
    RESEARCH_TABLE: ${self:service}-${self:provider.stage}-research
    FORMS_TABLE: ${self:service}-${self:provider.stage}-forms
    FORM_RESPONSES_TABLE: ${self:service}-${self:provider.stage}-form-responses
    CONNECTIONS_TABLE: ${self:service}-${self:provider.stage}-connections
    JWT_SECRET: ${env:JWT_SECRET, 'dev_jwt_secret_key_for_testing_only'}
    STAGE: ${self:provider.stage}
  httpApi:
    cors:
      allowedOrigins:
        - http://localhost:4700
        - http://localhost:3000
        - https://app.emotio-x.com
        - https://dev.emotio-x.com
      allowedHeaders:
        - Content-Type
        - Authorization
        - X-Amz-Date
        - X-Api-Key
        - X-Amz-Security-Token
        - X-Amz-User-Agent
        - Accept
        - Origin
        - Referer
        - User-Agent
      allowedMethods:
        - GET
        - POST
        - PUT
        - DELETE
        - OPTIONS
      allowCredentials: true
      maxAge: 600
  websocketsApiRouteSelectionExpression: $request.body.action
  iam:
    role:
      statements:
        - Effect: Allow
          Action:
            - dynamodb:PutItem
            - dynamodb:GetItem
            - dynamodb:UpdateItem
            - dynamodb:DeleteItem
            - dynamodb:Query
            - dynamodb:Scan
          Resource: 
            - !GetAtt UsersTable.Arn
            - !Join ['', [!GetAtt UsersTable.Arn, '/index/*']]
            - !GetAtt ResearchTable.Arn
            - !Join ['', [!GetAtt ResearchTable.Arn, '/index/*']]
            - !GetAtt FormsTable.Arn
            - !Join ['', [!GetAtt FormsTable.Arn, '/index/*']]
            - !GetAtt FormResponsesTable.Arn
            - !Join ['', [!GetAtt FormResponsesTable.Arn, '/index/*']]
            - !GetAtt ConnectionsTable.Arn
            - !Join ['', [!GetAtt ConnectionsTable.Arn, '/index/*']]

# Definición de funciones por controlador
functions:
  # API Gateway - Controlador de Autenticación
  auth-login:
    handler: .dist/controllers/auth.controller.login
    events:
      - httpApi:
          path: /api/auth/login
          method: POST

  auth-register:
    handler: .dist/controllers/auth.controller.register
    events:
      - httpApi:
          path: /api/auth/register
          method: POST

  auth-logout:
    handler: .dist/controllers/auth.controller.logout
    events:
      - httpApi:
          path: /api/auth/logout
          method: POST

  # API Gateway - Controlador de Usuarios
  user-get:
    handler: .dist/controllers/user.controller.getUser
    events:
      - httpApi:
          path: /api/users/me
          method: GET
          authorizer: aws_iam

  user-update:
    handler: .dist/controllers/user.controller.updateUser
    events:
      - httpApi:
          path: /api/users/me
          method: PUT
          authorizer: aws_iam

  user-delete:
    handler: .dist/controllers/user.controller.deleteUser
    events:
      - httpApi:
          path: /api/users/me
          method: DELETE
          authorizer: aws_iam

  # API Gateway - Controlador de Investigaciones
  research-create:
    handler: .dist/controllers/research.controller.createResearch
    events:
      - httpApi:
          path: /api/research
          method: POST
          authorizer: aws_iam

  research-get:
    handler: .dist/controllers/research.controller.getResearch
    events:
      - httpApi:
          path: /api/research/{id}
          method: GET
          authorizer: aws_iam

  research-get-all:
    handler: .dist/controllers/research.controller.getAllResearch
    events:
      - httpApi:
          path: /api/research
          method: GET
          authorizer: aws_iam

  research-update:
    handler: .dist/controllers/research.controller.updateResearch
    events:
      - httpApi:
          path: /api/research/{id}
          method: PUT
          authorizer: aws_iam

  research-delete:
    handler: .dist/controllers/research.controller.deleteResearch
    events:
      - httpApi:
          path: /api/research/{id}
          method: DELETE
          authorizer: aws_iam

  # API Gateway - Controlador de Formularios
  form-create:
    handler: .dist/controllers/form.controller.createForm
    events:
      - httpApi:
          path: /api/forms
          method: POST
          authorizer: aws_iam

  form-get:
    handler: .dist/controllers/form.controller.getForm
    events:
      - httpApi:
          path: /api/forms/{id}
          method: GET
          authorizer: aws_iam

  form-get-all:
    handler: .dist/controllers/form.controller.getAllForms
    events:
      - httpApi:
          path: /api/forms
          method: GET
          authorizer: aws_iam

  form-update:
    handler: .dist/controllers/form.controller.updateForm
    events:
      - httpApi:
          path: /api/forms/{id}
          method: PUT
          authorizer: aws_iam

  form-delete:
    handler: .dist/controllers/form.controller.deleteForm
    events:
      - httpApi:
          path: /api/forms/{id}
          method: DELETE
          authorizer: aws_iam

  forms-publish:
    handler: .dist/controllers/forms.controller.publish
    events:
      - httpApi:
          path: /api/forms/{id}/publish
          method: POST

  forms-unpublish:
    handler: .dist/controllers/forms.controller.unpublish
    events:
      - httpApi:
          path: /api/forms/{id}/unpublish
          method: POST

  forms-get-public:
    handler: .dist/controllers/forms.controller.getPublic
    events:
      - httpApi:
          path: /api/public/forms/{id}
          method: GET

  forms-submit-responses:
    handler: .dist/controllers/forms.controller.submitResponses
    events:
      - httpApi:
          path: /api/public/forms/{id}/responses
          method: POST

  forms-get-responses:
    handler: .dist/controllers/forms.controller.getResponses
    events:
      - httpApi:
          path: /api/forms/{id}/responses
          method: GET

  # API Gateway - WebSocket
  websocket-connect:
    handler: .dist/controllers/websocket.controller.connect
    events:
      - websocket:
          route: $connect

  websocket-disconnect:
    handler: .dist/controllers/websocket.controller.disconnect
    events:
      - websocket:
          route: $disconnect

  websocket-default:
    handler: .dist/controllers/websocket.controller.defaultHandler
    events:
      - websocket:
          route: $default

  websocket-authorizer:
    handler: .dist/controllers/websocket.controller.authorize
    events:
      - websocket:
          route: $connect
          authorizer:
            name: websocket-authorizer
            identitySource:
              - 'route.request.querystring.token'

  # API Gateway - Welcome Screen
  welcome-screen-get:
    handler: .dist/controllers/welcome-screen.controller.getWelcomeScreen
    events:
      - httpApi:
          path: /api/welcome-screen
          method: GET
          authorizer: aws_iam

  welcome-screen-update:
    handler: .dist/controllers/welcome-screen.controller.updateWelcomeScreen
    events:
      - httpApi:
          path: /api/welcome-screen
          method: PUT
          authorizer: aws_iam

  # API Gateway - CORS
  options-handler:
    handler: .dist/controllers/cors.controller.optionsHandler
    events:
      - httpApi:
          path: /{proxy+}
          method: OPTIONS

  cors-api-research:
    handler: .dist/controllers/cors.controller.handler
    events:
      - httpApi:
          path: /api/research
          method: OPTIONS

  cors-api-research-id:
    handler: .dist/controllers/cors.controller.handler
    events:
      - httpApi:
          path: /api/research/{id}
          method: OPTIONS

  cors-api-forms:
    handler: .dist/controllers/cors.controller.handler
    events:
      - httpApi:
          path: /api/forms
          method: OPTIONS

  cors-api-forms-id:
    handler: .dist/controllers/cors.controller.handler
    events:
      - httpApi:
          path: /api/forms/{id}
          method: OPTIONS

resources:
  Resources:
    # Tabla de Usuarios
    UsersTable:
      Type: AWS::DynamoDB::Table
      Properties:
        TableName: ${self:provider.environment.USERS_TABLE}
        BillingMode: PAY_PER_REQUEST
        AttributeDefinitions:
          - AttributeName: id
            AttributeType: S
          - AttributeName: email
            AttributeType: S
        KeySchema:
          - AttributeName: id
            KeyType: HASH
        GlobalSecondaryIndexes:
          - IndexName: EmailIndex
            KeySchema:
              - AttributeName: email
                KeyType: HASH
            Projection:
              ProjectionType: ALL

    # Tabla de Investigaciones
    ResearchTable:
      Type: AWS::DynamoDB::Table
      Properties:
        TableName: ${self:provider.environment.RESEARCH_TABLE}
        BillingMode: PAY_PER_REQUEST
        AttributeDefinitions:
          - AttributeName: id
            AttributeType: S
          - AttributeName: userId
            AttributeType: S
        KeySchema:
          - AttributeName: id
            KeyType: HASH
        GlobalSecondaryIndexes:
          - IndexName: UserIdIndex
            KeySchema:
              - AttributeName: userId
                KeyType: HASH
            Projection:
              ProjectionType: ALL

    # Tabla de Formularios
    FormsTable:
      Type: AWS::DynamoDB::Table
      Properties:
        TableName: ${self:provider.environment.FORMS_TABLE}
        BillingMode: PAY_PER_REQUEST
        AttributeDefinitions:
          - AttributeName: id
            AttributeType: S
          - AttributeName: researchId
            AttributeType: S
        KeySchema:
          - AttributeName: id
            KeyType: HASH
        GlobalSecondaryIndexes:
          - IndexName: ResearchIdIndex
            KeySchema:
              - AttributeName: researchId
                KeyType: HASH
            Projection:
              ProjectionType: ALL

    # Tabla de Respuestas de Formularios
    FormResponsesTable:
      Type: AWS::DynamoDB::Table
      Properties:
        TableName: ${self:provider.environment.FORM_RESPONSES_TABLE}
        BillingMode: PAY_PER_REQUEST
        AttributeDefinitions:
          - AttributeName: id
            AttributeType: S
          - AttributeName: formId
            AttributeType: S
          - AttributeName: researchId
            AttributeType: S
        KeySchema:
          - AttributeName: id
            KeyType: HASH
        GlobalSecondaryIndexes:
          - IndexName: FormIdIndex
            KeySchema:
              - AttributeName: formId
                KeyType: HASH
            Projection:
              ProjectionType: ALL
          - IndexName: ResearchIdIndex
            KeySchema:
              - AttributeName: researchId
                KeyType: HASH
            Projection:
              ProjectionType: ALL

    # Tabla de Conexiones WebSocket
    ConnectionsTable:
      Type: AWS::DynamoDB::Table
      Properties:
        TableName: ${self:provider.environment.CONNECTIONS_TABLE}
        BillingMode: PAY_PER_REQUEST
        AttributeDefinitions:
          - AttributeName: connectionId
            AttributeType: S
          - AttributeName: userId
            AttributeType: S
        KeySchema:
          - AttributeName: connectionId
            KeyType: HASH
        GlobalSecondaryIndexes:
          - IndexName: UserIdIndex
            KeySchema:
              - AttributeName: userId
                KeyType: HASH
            Projection:
              ProjectionType: ALL

    WelcomeScreenTable:
      Type: AWS::DynamoDB::Table
      Properties:
        TableName: ${self:custom.welcomeScreenTableName}
        BillingMode: PAY_PER_REQUEST
        AttributeDefinitions:
          - AttributeName: researchId
            AttributeType: S
          - AttributeName: id
            AttributeType: S
        KeySchema:
          - AttributeName: researchId
            KeyType: HASH
          - AttributeName: id
            KeyType: RANGE
        StreamSpecification:
          StreamViewType: NEW_AND_OLD_IMAGES
        Tags:
          - Key: Project
            Value: EmotioX 

  Outputs:
    HttpApiUrl:
      Description: URL of the HTTP API
      Value: 
        Fn::Join:
          - ''
          - - https://
            - Ref: HttpApi
            - '.execute-api.'
            - Ref: AWS::Region
            - '.amazonaws.com'
    WebSocketApiUrl:
      Description: URL of the WebSocket API
      Value:
        Fn::Join:
          - ''
          - - wss://
            - Ref: WebsocketsApi
            - '.execute-api.'
            - Ref: AWS::Region
            - '.amazonaws.com/'
            - ${self:provider.stage} 