service: emotio-x-backend-v3

frameworkVersion: '3'

provider:
  name: aws
  runtime: nodejs18.x
  stage: ${opt:stage, 'dev'}
  region: us-east-1
  profile: default
  
  environment:
    NODE_ENV: ${opt:stage, 'dev'}
    REGION: ${self:provider.region}
    USERS_TABLE: ${self:service}-users-${self:provider.stage}
    CONNECTIONS_TABLE: ${self:service}-connections-${self:provider.stage}
    RESEARCH_TABLE: ${self:service}-research-${self:provider.stage}
    FORMS_TABLE: ${self:service}-forms-${self:provider.stage}
    WELCOME_SCREEN_TABLE: ${self:service}-welcome-screens-${self:provider.stage}
    THANK_YOU_SCREEN_TABLE: ${self:service}-thank-you-screens-${self:provider.stage}
    JWT_SECRET: ${env:JWT_SECRET, 'your-secret-key-for-local-dev'}
    S3_BUCKET_NAME: ${self:custom.s3BucketName}
    WEBSOCKET_API_URL: !GetAtt WebsocketsApi.ApiEndpoint
  
  httpApi:
    cors:
      allowedOrigins:
        - "http://localhost:3000"
        - "http://localhost:4700"
        - "https://4hdn6j00e6.execute-api.us-east-1.amazonaws.com"
        - "https://api.emotio-x.com"
        - "https://emotio-x.com"
        - "https://app.emotio-x.com"
        - "https://emotio-x.netlify.app"
      allowedMethods:
        - GET
        - POST
        - DELETE
        - PUT
        - OPTIONS
      allowedHeaders:
        - Content-Type
        - Authorization
        - X-Requested-With
        - X-Api-Key
      allowCredentials: true
      exposedResponseHeaders:
        - Content-Type
        - X-Amz-Date
        - Authorization
        - X-Api-Key
        - X-Amz-Security-Token
        - X-Amz-User-Agent
      maxAge: 3600
      
  iam:
    role:
      statements:
        # Permissions for CloudWatch Logs
        - Effect: "Allow"
          Action:
            - "logs:CreateLogGroup"
            - "logs:CreateLogStream"
            - "logs:PutLogEvents"
          Resource: "arn:aws:logs:*:*:*"
        
        # Permissions for DynamoDB
        - Effect: "Allow"
          Action:
            - "dynamodb:PutItem"
            - "dynamodb:GetItem"
            - "dynamodb:DeleteItem"
            - "dynamodb:UpdateItem"
            - "dynamodb:Query"
            - "dynamodb:Scan"
            - "dynamodb:BatchGetItem"
            - "dynamodb:BatchWriteItem"
          Resource:
            - "arn:aws:dynamodb:${self:provider.region}:*:table/${self:provider.environment.USERS_TABLE}"
            - "arn:aws:dynamodb:${self:provider.region}:*:table/${self:provider.environment.USERS_TABLE}/index/*"
            - "arn:aws:dynamodb:${self:provider.region}:*:table/${self:provider.environment.CONNECTIONS_TABLE}"
            - "arn:aws:dynamodb:${self:provider.region}:*:table/${self:provider.environment.RESEARCH_TABLE}"
            - "arn:aws:dynamodb:${self:provider.region}:*:table/${self:provider.environment.RESEARCH_TABLE}/index/*"
            - "arn:aws:dynamodb:${self:provider.region}:*:table/${self:provider.environment.FORMS_TABLE}"
            - "arn:aws:dynamodb:${self:provider.region}:*:table/${self:provider.environment.FORMS_TABLE}/index/*"
        
        # Permissions for S3
        - Effect: "Allow"
          Action:
            - "s3:PutObject"
            - "s3:GetObject"
            - "s3:DeleteObject"
            - "s3:ListBucket"
          Resource:
            - "arn:aws:s3:::${self:custom.s3BucketName}"
            - "arn:aws:s3:::${self:custom.s3BucketName}/*"
            
        # Permissions for WebSocket management
        - Effect: "Allow"
          Action:
            - "execute-api:ManageConnections"
          Resource:
            - "arn:aws:execute-api:${self:provider.region}:*:*/*/POST/@connections/*"
            - "arn:aws:execute-api:${self:provider.region}:*:*/*/GET/@connections/*"
            - "arn:aws:execute-api:${self:provider.region}:*:*/*/DELETE/@connections/*"

custom:
  s3BucketName: "${self:service}-${self:provider.stage}-storage"
  serverless-offline:
    httpPort: 4700
    websocketPort: 4701
    host: 0.0.0.0
  tsConfig: ./tsconfig.json
  exportOutputs:
    include:
      - HttpApiUrl
      - ApiId
      - WebsocketApiUrl
    output:
      file: ./endpoints.json
  exportEndpoints:
    output: ./endpoints.json
    useApiGatewayDomain: true
    includeStage: true
    overrideApiUrl: ${env:OVERRIDE_API_URL, ''}

plugins:
  - ./serverless-ts-paths-plugin.js
  - serverless-offline
  - serverless-dotenv-plugin
  - serverless-export-outputs
  - serverless-plugin-export-endpoints

package:
  individually: false
  patterns:
    - '!node_modules/**'
    - 'src/**'
    - 'index.js'
    - 'package.json'
    - 'tsconfig.json'
    - '../shared/**'

resources:
  Resources:
    # DynamoDB Tables
    UsersTable:
      Type: AWS::DynamoDB::Table
      Properties:
        TableName: ${self:provider.environment.USERS_TABLE}
        BillingMode: PAY_PER_REQUEST
        AttributeDefinitions:
          - AttributeName: id
            AttributeType: S
          - AttributeName: email
            AttributeType: S
        KeySchema:
          - AttributeName: id
            KeyType: HASH
        GlobalSecondaryIndexes:
          - IndexName: EmailIndex
            KeySchema:
              - AttributeName: email
                KeyType: HASH
            Projection:
              ProjectionType: ALL
              
    ConnectionsTable:
      Type: AWS::DynamoDB::Table
      Properties:
        TableName: ${self:provider.environment.CONNECTIONS_TABLE}
        BillingMode: PAY_PER_REQUEST
        AttributeDefinitions:
          - AttributeName: connectionId
            AttributeType: S
          - AttributeName: userId
            AttributeType: S
        KeySchema:
          - AttributeName: connectionId
            KeyType: HASH
        GlobalSecondaryIndexes:
          - IndexName: UserIdIndex
            KeySchema:
              - AttributeName: userId
                KeyType: HASH
            Projection:
              ProjectionType: ALL
              
    ResearchTable:
      Type: AWS::DynamoDB::Table
      Properties:
        TableName: ${self:provider.environment.RESEARCH_TABLE}
        BillingMode: PAY_PER_REQUEST
        AttributeDefinitions:
          - AttributeName: id
            AttributeType: S
          - AttributeName: userId
            AttributeType: S
        KeySchema:
          - AttributeName: id
            KeyType: HASH
        GlobalSecondaryIndexes:
          - IndexName: UserIdIndex
            KeySchema:
              - AttributeName: userId
                KeyType: HASH
            Projection:
              ProjectionType: ALL
              
    FormsTable:
      Type: AWS::DynamoDB::Table
      Properties:
        TableName: ${self:provider.environment.FORMS_TABLE}
        BillingMode: PAY_PER_REQUEST
        AttributeDefinitions:
          - AttributeName: id
            AttributeType: S
          - AttributeName: researchId
            AttributeType: S
        KeySchema:
          - AttributeName: id
            KeyType: HASH
        GlobalSecondaryIndexes:
          - IndexName: ResearchIdIndex
            KeySchema:
              - AttributeName: researchId
                KeyType: HASH
            Projection:
              ProjectionType: ALL
              
    ThankYouScreenTable:
      Type: AWS::DynamoDB::Table
      Properties:
        TableName: ${self:provider.environment.THANK_YOU_SCREEN_TABLE}
        BillingMode: PAY_PER_REQUEST
        AttributeDefinitions:
          - AttributeName: id
            AttributeType: S
          - AttributeName: researchId
            AttributeType: S
        KeySchema:
          - AttributeName: id
            KeyType: HASH
        GlobalSecondaryIndexes:
          - IndexName: ResearchIdIndex
            KeySchema:
              - AttributeName: researchId
                KeyType: HASH
            Projection:
              ProjectionType: ALL
              
    # S3 Bucket
    StorageBucket:
      Type: AWS::S3::Bucket
      Properties:
        BucketName: ${self:custom.s3BucketName}
        CorsConfiguration:
          CorsRules:
            - AllowedHeaders: ['*']
              AllowedMethods: [GET, PUT, POST, DELETE, HEAD]
              AllowedOrigins: ['*']
              MaxAge: 3000

functions:
  # Test Controller (para verificar configuración)
  test:
    handler: src/controllers/test.controller.handler
    events:
      - httpApi:
          path: /api/test
          method: get
          
  # Función de prueba usando index.js
  test-alternative:
    handler: index.test
    events:
      - httpApi:
          path: /api/test-alt
          method: get

  # Auth Controller
  auth-register:
    handler: src/controllers/auth.controller.register
    events:
      - httpApi:
          path: /api/auth/register
          method: post

  auth-login:
    handler: src/controllers/auth.controller.login
    events:
      - httpApi:
          path: /api/auth/login
          method: post

  auth-logout:
    handler: src/controllers/auth.controller.logout
    events:
      - httpApi:
          path: /api/auth/logout
          method: post

  # Users Controller
  user-get:
    handler: src/controllers/users.controller.getUser
    events:
      - httpApi:
          path: /api/users/{id}
          method: get

  user-update:
    handler: src/controllers/users.controller.updateUser
    events:
      - httpApi:
          path: /api/users/{id}
          method: put

  user-delete:
    handler: src/controllers/users.controller.deleteUser
    events:
      - httpApi:
          path: /api/users/{id}
          method: delete

  users-get-all:
    handler: src/controllers/users.controller.getAllUsers
    events:
      - httpApi:
          path: /api/users
          method: get

  # Research Controller
  research-create:
    handler: src/controllers/research.controller.createResearch
    events:
      - httpApi:
          path: /api/research
          method: post

  research-get:
    handler: src/controllers/research.controller.getResearch
    events:
      - httpApi:
          path: /api/research/{id}
          method: get

  research-get-all:
    handler: src/controllers/research.controller.getAllResearch
    events:
      - httpApi:
          path: /api/research
          method: get

  research-update:
    handler: src/controllers/research.controller.updateResearch
    events:
      - httpApi:
          path: /api/research/{id}
          method: put

  research-delete:
    handler: src/controllers/research.controller.deleteResearch
    events:
      - httpApi:
          path: /api/research/{id}
          method: delete

  # Forms Controller
  form-create:
    handler: src/controllers/forms.controller.createForm
    events:
      - httpApi:
          path: /api/forms
          method: post

  form-get:
    handler: src/controllers/forms.controller.getForm
    events:
      - httpApi:
          path: /api/forms/{id}
          method: get

  form-get-by-research:
    handler: src/controllers/forms.controller.getFormsByResearch
    events:
      - httpApi:
          path: /api/forms/research/{researchId}
          method: get

  form-update:
    handler: src/controllers/forms.controller.updateForm
    events:
      - httpApi:
          path: /api/forms/{id}
          method: put

  form-delete:
    handler: src/controllers/forms.controller.deleteForm
    events:
      - httpApi:
          path: /api/forms/{id}
          method: delete

  # WebSocket
  websocket-connect:
    handler: src/controllers/websocket.controller.connect
    events:
      - websocket:
          route: $connect

  websocket-disconnect:
    handler: src/controllers/websocket.controller.disconnect
    events:
      - websocket:
          route: $disconnect

  websocket-default:
    handler: src/controllers/websocket.controller.defaultHandler
    events:
      - websocket:
          route: $default

  websocket-message:
    handler: src/controllers/websocket.controller.message
    events:
      - websocket:
          route: message
          
  # Thank You Screen Controller
  thank-you-screen-save:
    handler: src/controllers/thank-you-screen.controller.save
    events:
      - httpApi:
          path: /api/thank-you-screens
          method: post
          
  thank-you-screen-get-by-research:
    handler: src/controllers/thank-you-screen.controller.get
    events:
      - httpApi:
          path: /api/thank-you-screens/research/{researchId}
          method: get
          
  thank-you-screen-get-by-id:
    handler: src/controllers/thank-you-screen.controller.getById
    events:
      - httpApi:
          path: /api/thank-you-screens/{id}
          method: get
          
  thank-you-screen-update:
    handler: src/controllers/thank-you-screen.controller.update
    events:
      - httpApi:
          path: /api/thank-you-screens/{id}
          method: put
          
  thank-you-screen-delete:
    handler: src/controllers/thank-you-screen.controller.remove
    events:
      - httpApi:
          path: /api/thank-you-screens/{id}
          method: delete 