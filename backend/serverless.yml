service: backend-serverless

frameworkVersion: '3'

provider:
  name: aws
  runtime: nodejs18.x
  stage: ${opt:stage, 'dev'}
  region: us-east-1
  environment:
    USERS_TABLE: ${self:service}-users-${self:provider.stage}
    CONNECTIONS_TABLE: ${self:service}-connections-${self:provider.stage}
    JWT_SECRET: ${env:JWT_SECRET, 'emotiox-dev-secret-key-2024'}
  httpApi:
    cors:
      allowedOrigins:
        - http://localhost:4700
        - http://localhost:3000
        - https://app.emotio-x.com
        - https://dev.emotio-x.com
      allowedHeaders:
        - Content-Type
        - Authorization
        - X-Amz-Date
        - X-Api-Key
        - X-Amz-Security-Token
        - X-Amz-User-Agent
        - Accept
      allowedMethods:
        - GET
        - POST
        - PUT
        - DELETE
        - OPTIONS
      allowCredentials: true
      maxAge: 600 # 10 minutos
  websocketsApiRouteSelectionExpression: $request.body.action

  iam:
    role:
      statements:
        - Effect: Allow
          Action:
            - dynamodb:Query
            - dynamodb:Scan
            - dynamodb:GetItem
            - dynamodb:PutItem
            - dynamodb:UpdateItem
            - dynamodb:DeleteItem
            - execute-api:ManageConnections
          Resource:
            - "arn:aws:dynamodb:${aws:region}:*:table/${self:provider.environment.USERS_TABLE}"
            - "arn:aws:dynamodb:${aws:region}:*:table/${self:provider.environment.USERS_TABLE}/index/*"
            - "arn:aws:dynamodb:${aws:region}:*:table/${self:provider.environment.CONNECTIONS_TABLE}"
            - "arn:aws:dynamodb:${aws:region}:*:table/${self:provider.environment.CONNECTIONS_TABLE}/index/*"
            - "arn:aws:execute-api:${aws:region}:${aws:accountId}:*/*/@connections/*"

functions:
  # WebSocket handlers
  websocketConnect:
    handler: src/handlers/websocket.connect
    events:
      - websocket:
          route: $connect
          authorizer:
            name: websocketAuthorizer
            identitySource:
              - 'route.request.querystring.token'

  websocketDisconnect:
    handler: src/handlers/websocket.disconnect
    events:
      - websocket:
          route: $disconnect

  websocketDefault:
    handler: src/handlers/websocket.handleDefault
    events:
      - websocket:
          route: $default

  websocketAuthorizer:
    handler: src/handlers/websocket.authorize

  # Funciones de autenticación
  login:
    handler: src/handlers/auth.login
    events:
      - httpApi:
          path: /auth/login
          method: POST

  register:
    handler: src/handlers/auth.register
    events:
      - httpApi:
          path: /auth/register
          method: POST

  logout:
    handler: src/handlers/auth.logout
    events:
      - httpApi:
          path: /auth/logout
          method: POST

  # Funciones de gestión de usuarios
  getUser:
    handler: src/handlers/user.getUser
    events:
      - httpApi:
          path: /users/me
          method: GET

  updateUser:
    handler: src/handlers/user.updateUser
    events:
      - httpApi:
          path: /users/me
          method: PUT

  deleteUser:
    handler: src/handlers/user.deleteUser
    events:
      - httpApi:
          path: /users/me
          method: DELETE

  # Función para manejar las opciones CORS
  optionsHandler:
    handler: src/handlers/cors.handler
    events:
      - httpApi:
          path: /{proxy+}
          method: OPTIONS

resources:
  Outputs:
    ApiUrl:
      Description: "API Gateway endpoint URL"
      Value: !Join ['', ['https://', !Ref HttpApi, '.execute-api.', !Ref 'AWS::Region', '.amazonaws.com']]
    WebSocketEndpoint:
      Description: "WebSocket endpoint URL"
      Value: !Join 
        - ''
        - - 'wss://'
          - !Ref WebsocketsApi
          - '.execute-api.'
          - !Ref 'AWS::Region'
          - '.amazonaws.com/'
          - ${self:provider.stage}
    Endpoints:
      Description: "API Endpoints"
      Value: !Join 
        - ''
        - - '{"login":{"POST":"/auth/login"},'
          - '"register":{"POST":"/auth/register"},'
          - '"logout":{"POST":"/auth/logout"},'
          - '"getUser":{"GET":"/users/me"},'
          - '"updateUser":{"PUT":"/users/me"},'
          - '"deleteUser":{"DELETE":"/users/me"}}'

  Resources:
    UsersTable:
      Type: AWS::DynamoDB::Table
      Properties:
        TableName: ${self:provider.environment.USERS_TABLE}
        AttributeDefinitions:
          - AttributeName: id
            AttributeType: S
          - AttributeName: email
            AttributeType: S
        KeySchema:
          - AttributeName: id
            KeyType: HASH
        GlobalSecondaryIndexes:
          - IndexName: EmailIndex
            KeySchema:
              - AttributeName: email
                KeyType: HASH
            Projection:
              ProjectionType: ALL
            ProvisionedThroughput:
              ReadCapacityUnits: 1
              WriteCapacityUnits: 1
        ProvisionedThroughput:
          ReadCapacityUnits: 1
          WriteCapacityUnits: 1

    ConnectionsTable:
      Type: AWS::DynamoDB::Table
      Properties:
        TableName: ${self:service}-connections-${self:provider.stage}
        AttributeDefinitions:
          - AttributeName: connectionId
            AttributeType: S
          - AttributeName: userId
            AttributeType: S
        KeySchema:
          - AttributeName: connectionId
            KeyType: HASH
        GlobalSecondaryIndexes:
          - IndexName: UserIdIndex
            KeySchema:
              - AttributeName: userId
                KeyType: HASH
            Projection:
              ProjectionType: ALL
            ProvisionedThroughput:
              ReadCapacityUnits: 1
              WriteCapacityUnits: 1
        ProvisionedThroughput:
          ReadCapacityUnits: 1
          WriteCapacityUnits: 1

plugins:
  - serverless-esbuild
  - serverless-offline
  - serverless-dotenv-plugin
  - serverless-export-outputs

custom:
  esbuild:
    bundle: true
    minify: false
    sourcemap: true
    exclude:
      - aws-sdk
    target: node18
    platform: node
    format: cjs
    watch:
      pattern: ['src/**/*.ts']
      ignore: ['.build/**/*', 'node_modules/**/*']
  exportOutputs:
    fileName: '../frontend/src/config/outputs.json'
    format: json
    indent: 2
  serverless-offline:
    httpPort: 4000
    noPrependStageInUrl: true
    useChildProcesses: true 