#!/bin/bash

# Script de deploy inteligente que detecta recursos existentes y configura el despliegue apropiado
# Uso: ./deploy-smart.sh [stage] [region]

set -e

STAGE=${1:-dev}
REGION=${2:-${AWS_REGION:-us-east-1}}
SERVICE_NAME="emotioxv2-backend"

echo "üöÄ Deploy inteligente de EmotioX V2 Backend"
echo "üéØ Stage: $STAGE"
echo "üìç Regi√≥n: $REGION"
echo "üè∑Ô∏è  Servicio: $SERVICE_NAME"
echo ""

# Verificar dependencias
echo "üîç Verificando dependencias..."
if ! command -v aws &> /dev/null; then
    echo "‚ùå AWS CLI no est√° instalado"
    exit 1
fi

if ! command -v serverless &> /dev/null; then
    echo "‚ùå Serverless Framework no est√° instalado"
    echo "   Instala con: npm install -g serverless"
    exit 1
fi

if ! aws sts get-caller-identity &>/dev/null; then
    echo "‚ùå AWS CLI no est√° configurado correctamente"
    echo "   Configura tus credenciales AWS antes de continuar"
    exit 1
fi

echo "‚úÖ Dependencias verificadas"
echo ""

# Ejecutar verificaci√≥n de recursos existentes
echo "üîé Detectando recursos existentes..."
source ./scripts/check-existing-resources.sh $STAGE

echo ""
echo "‚öôÔ∏è  Configurando variables de entorno para deploy..."

# Exportar variables para serverless
export AWS_REGION=$REGION

echo "‚úÖ Variables configuradas"
echo ""

# Mostrar configuraci√≥n final
echo "üìã Configuraci√≥n final del deploy:"
echo "   ‚Ä¢ CREATE_NEW_BUCKET: ${CREATE_NEW_BUCKET:-true}"
echo "   ‚Ä¢ CREATE_NEW_TABLES: ${CREATE_NEW_TABLES:-true}"
echo "   ‚Ä¢ Bucket S3: ${EXISTING_BUCKET:-[nuevo] ${SERVICE_NAME}-uploads-${STAGE}}"
echo "   ‚Ä¢ Tabla principal: ${EXISTING_MAIN_TABLE:-[nueva] ${SERVICE_NAME}-researches-${STAGE}}"
echo "   ‚Ä¢ Tabla usuarios: ${EXISTING_USERS_TABLE:-[nueva] ${SERVICE_NAME}-users-${STAGE}}"
echo ""

# Confirmar deploy
read -p "¬øContinuar con el deploy? (y/N): " -n 1 -r
echo
if [[ ! $REPLY =~ ^[Yy]$ ]]; then
    echo "‚ùå Deploy cancelado por el usuario"
    exit 0
fi

echo ""
echo "üöÄ Iniciando deploy con Serverless Framework..."

# Construir argumentos para serverless deploy
DEPLOY_ARGS="--stage $STAGE --region $REGION"

if [ -n "$EXISTING_BUCKET" ]; then
    DEPLOY_ARGS="$DEPLOY_ARGS --param existing-bucket=$EXISTING_BUCKET"
fi

if [ -n "$EXISTING_MAIN_TABLE" ]; then
    DEPLOY_ARGS="$DEPLOY_ARGS --param existing-table=$EXISTING_MAIN_TABLE"
fi

if [ -n "$EXISTING_USERS_TABLE" ]; then
    DEPLOY_ARGS="$DEPLOY_ARGS --param existing-users-table=$EXISTING_USERS_TABLE"
fi

echo "üìù Comando a ejecutar:"
echo "   serverless deploy $DEPLOY_ARGS"
echo ""

# Ejecutar deploy
if serverless deploy $DEPLOY_ARGS; then
    echo ""
    echo "üéâ Deploy completado exitosamente!"
    echo ""
    echo "üìä Resumen del deploy:"
    echo "   ‚Ä¢ Stage: $STAGE"
    echo "   ‚Ä¢ Regi√≥n: $REGION"
    
    if [ "$CREATE_NEW_BUCKET" = "true" ]; then
        echo "   ‚Ä¢ ‚ú® Bucket S3 creado: ${SERVICE_NAME}-uploads-${STAGE}"
    else
        echo "   ‚Ä¢ ‚ôªÔ∏è  Bucket S3 existente usado: $EXISTING_BUCKET"
    fi
    
    if [ "$CREATE_NEW_TABLES" = "true" ]; then
        echo "   ‚Ä¢ ‚ú® Tablas DynamoDB creadas"
    else
        echo "   ‚Ä¢ ‚ôªÔ∏è  Tablas DynamoDB existentes usadas"
    fi
    
    echo ""
    echo "üîó Para obtener los endpoints desplegados:"
    echo "   serverless info --stage $STAGE"
    
else
    echo ""
    echo "‚ùå Error durante el deploy"
    echo "üí° Verifica los logs arriba para m√°s detalles"
    exit 1
fi