# Definiciones de Funciones Lambda para serverless.yml

# Función principal para API REST - maneja todas las rutas
api:
  handler: src/index.handler
  events:
    # --- Rutas de Participantes ---
    - http:
        path: /participants/login
        method: POST
        cors: true
    - http:
        path: /participants
        method: POST
        cors: true
    - http:
        path: /participants
        method: GET
        cors: true
    - http:
        path: /participants/{id}
        method: GET
        cors: true
    - http:
        path: /participants/{id}
        method: DELETE
        cors: true

    # --- Rutas para Module Responses ---
    - http:
        path: /module-responses
        method: GET
        cors: true
    - http:
        path: /module-responses
        method: POST
        cors: true
    - http:
        path: /module-responses/{id}
        method: PUT
        cors: true
    - http:
        path: /module-responses/complete
        method: POST
        cors: true
    - http:
        path: /module-responses/research/{id}
        method: GET
        cors: true
    - http:
        path: /module-responses
        method: DELETE
        cors: true

    # Ruta específica para GET WelcomeScreen
    - http:
        path: /research/{researchId}/welcome-screen
        method: GET
        cors: true

    # Ruta específica para GET SmartVOC
    - http:
        path: /research/{researchId}/smart-voc
        method: GET
        cors: true

    # Añadir ruta explícita para PUT SmartVOC
    - http:
        path: /research/{researchId}/smart-voc
        method: PUT
        cors: true

    # Ruta específica para DELETE SmartVOC
    - http:
        path: /research/{researchId}/smart-voc
        method: DELETE
        cors: true

    # --- RUTAS PARA EYE-TRACKING CONFIG ---
    # Obtener configuración de eye-tracking
    - http:
        path: /research/{researchId}/eye-tracking
        method: GET
        cors: true
    # Crear configuración de eye-tracking
    - http:
        path: /research/{researchId}/eye-tracking
        method: POST
        cors: true
    # Actualizar configuración de eye-tracking
    - http:
        path: /research/{researchId}/eye-tracking
        method: PUT
        cors: true
    # Eliminar configuración de eye-tracking
    - http:
        path: /research/{researchId}/eye-tracking
        method: DELETE
        cors: true

    # --- RUTA: Obtener resultados procesados de SmartVOC ---
    - http:
        path: /module-responses/smartvoc/{researchId}
        method: GET
        cors: true

    # --- RUTA: Obtener resultados específicos para CPVCard ---
    - http:
        path: /module-responses/cpv/{researchId}
        method: GET
        cors: true

    # --- RUTA: Obtener resultados específicos para TrustRelationshipFlow ---
    - http:
        path: /module-responses/trustflow/{researchId}
        method: GET
        cors: true

    # --- RUTA: Crear nueva investigación ---
    - http:
        path: /research
        method: POST
        cors: true

    # --- RUTA: Obtener todas las investigaciones ---
    - http:
        path: /research
        method: GET
        cors: true

    # --- NUEVA RUTA: Obtener formularios/pasos de una investigación ---
    - http:
        path: /research/{researchId}/forms
        method: GET
        cors: true

    # --- RUTA: Eliminar investigación por ID ---
    - http:
        path: /research/{researchId}
        method: DELETE
        cors: true

    # --- RUTAS PARA RESEARCH IN PROGRESS ---
    # Obtener métricas de overview
    - http:
        path: /research/{researchId}/metrics
        method: GET
        cors: true

    # Obtener participantes con estados
    - http:
        path: /research/{researchId}/participants/status
        method: GET
        cors: true

    # Obtener participantes por research
    - http:
        path: /research/{researchId}/participants
        method: GET
        cors: true

    # Obtener detalles de participante específico
    - http:
        path: /research/{researchId}/participants/{participantId}
        method: GET
        cors: true

    # Ruta genérica para el resto
    - http:
        path: /{proxy+}
        method: ANY
        cors: true
    - http:
        path: /
        method: ANY
        cors: true

  environment:
    CONNECTION_TYPE: http

# Función para WebSockets
websocket:
  handler: src/index.handler
  events:
    - websocket:
        route: $connect
    - websocket:
        route: $disconnect
    - websocket:
        route: $default
    - websocket:
        route: message
  environment:
    CONNECTION_TYPE: websocket

# Location Tracking Functions
saveLocation:
  handler: src/controllers/locationTracking.controller.saveLocation
  events:
    - http:
        path: location-tracking
        method: post
        cors: true
        authorizer: aws_iam
  environment:
    LOCATION_TRACKING_TABLE: ${self:provider.environment.LOCATION_TRACKING_TABLE}

getLocationsByResearchId:
  handler: src/controllers/locationTracking.controller.getLocationsByResearchId
  events:
    - http:
        path: location-tracking/{researchId}
        method: get
        cors: true
        authorizer: aws_iam
  environment:
    LOCATION_TRACKING_TABLE: ${self:provider.environment.LOCATION_TRACKING_TABLE}

getLocationStats:
  handler: src/controllers/locationTracking.controller.getLocationStats
  events:
    - http:
        path: location-tracking/{researchId}/stats
        method: get
        cors: true
        authorizer: aws_iam
  environment:
    LOCATION_TRACKING_TABLE: ${self:provider.environment.LOCATION_TRACKING_TABLE}

# --- FUNCIONES PARA VALIDACIÓN DE CUOTAS ---
validateParticipantQuotas:
  handler: src/functions/quotaValidation.validateParticipantQuotas
  events:
    - http:
        path: quota-validation/validate
        method: POST
        cors: true
  environment:
    DYNAMODB_TABLE: ${self:provider.environment.DYNAMODB_TABLE}

getQuotaStats:
  handler: src/functions/quotaValidation.getQuotaStats
  events:
    - http:
        path: quota-validation/stats/{researchId}
        method: GET
        cors: true
  environment:
    DYNAMODB_TABLE: ${self:provider.environment.DYNAMODB_TABLE}

resetQuotaCounters:
  handler: src/functions/quotaValidation.resetQuotaCounters
  events:
    - http:
        path: quota-validation/reset
        method: POST
        cors: true
  environment:
    DYNAMODB_TABLE: ${self:provider.environment.DYNAMODB_TABLE}
