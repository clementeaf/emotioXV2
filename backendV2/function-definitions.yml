# Definiciones de Funciones Lambda para serverless.yml

# Función principal para API REST - maneja todas las rutas
api:
  handler: src/index.handler
  events:
    # --- Rutas de Autenticación ---
    - http:
        path: /auth/login
        method: POST
        cors: true
    - http:
        path: /auth/register
        method: POST
        cors: true
    - http:
        path: /auth/logout
        method: POST
        cors: true
    - http:
        path: /auth/refreshToken
        method: POST
        cors: true
    - http:
        path: /auth/profile
        method: GET
        cors: true
    - http:
        path: /auth/me
        method: GET
        cors: true
    - http:
        path: /auth/users
        method: GET
        cors: true
    - http:
        path: /auth/user/{id}
        method: GET
        cors: true
    - http:
        path: /auth/user/{id}
        method: PUT
        cors: true
    - http:
        path: /auth/user/{id}
        method: DELETE
        cors: true

    # --- Rutas de Contenido Educativo ---
    - http:
        path: /educational-content
        method: GET
        cors: true
    - http:
        path: /educational-content
        method: POST
        cors: true
    - http:
        path: /educational-content/{contentType}
        method: GET
        cors: true
    - http:
        path: /educational-content/{contentType}
        method: PUT
        cors: true

    # --- Rutas de Participantes ---
    - http:
        path: /participants/login
        method: POST
        cors: true
    - http:
        path: /participants
        method: POST
        cors: true
    - http:
        path: /participants
        method: GET
        cors: true
    - http:
        path: /participants/{id}
        method: GET
        cors: true
    - http:
        path: /participants/{id}
        method: DELETE
        cors: true
    - http:
        path: /participants/generate
        method: POST
        cors: true
    - http:
        path: /research/{researchId}/participants
        method: GET
        cors: true

    # --- Rutas para Module Responses ---
    - http:
        path: /module-responses
        method: GET
        cors: true
    - http:
        path: /module-responses
        method: POST
        cors: true
    - http:
        path: /module-responses/{id}
        method: PUT
        cors: true
    - http:
        path: /module-responses/complete
        method: POST
        cors: true
    - http:
        path: /module-responses/research/{id}
        method: GET
        cors: true
    - http:
        path: /module-responses/grouped-by-question/{researchId}
        method: GET
        cors: true
    - http:
        path: /module-responses
        method: DELETE
        cors: true

    # --- RUTAS PARA WELCOME SCREEN (UNIFICADAS) ---
    - http:
        path: /research/{researchId}/welcome-screen
        method: GET
        cors: true
    - http:
        path: /research/{researchId}/welcome-screen
        method: POST # Maneja tanto creación como actualización (upsert)
        cors: true
    - http:
        path: /research/{researchId}/welcome-screen
        method: DELETE
        cors: true

    # --- RUTAS PARA SMART-VOC (UNIFICADAS) ---
    - http:
        path: /research/{researchId}/smart-voc
        method: GET
        cors: true
    - http:
        path: /research/{researchId}/smart-voc
        method: POST # Maneja tanto creación como actualización (upsert)
        cors: true
    - http:
        path: /research/{researchId}/smart-voc
        method: DELETE
        cors: true

    # --- RUTAS PARA THANK YOU SCREEN (UNIFICADAS) ---
    - http:
        path: /research/{researchId}/thank-you-screen
        method: GET
        cors: true
    - http:
        path: /research/{researchId}/thank-you-screen
        method: POST # Maneja tanto creación como actualización (upsert)
        cors: true
    - http:
        path: /research/{researchId}/thank-you-screen
        method: DELETE
        cors: true

    # --- RUTAS PARA COGNITIVE TASK (UNIFICADAS) ---
    - http:
        path: /research/{researchId}/cognitive-task
        method: GET
        cors: true
    - http:
        path: /research/{researchId}/cognitive-task
        method: POST # Maneja tanto creación como actualización (upsert)
        cors: true
    - http:
        path: /research/{researchId}/cognitive-task
        method: PUT # Maneja actualización por researchId (upsert)
        cors: true
    - http:
        path: /research/{researchId}/cognitive-task
        method: DELETE
        cors: true
    - http:
        path: /research/{researchId}/cognitive-task/upload-url
        method: POST
        cors: true

    # --- RUTAS PARA EYE-TRACKING CONFIG ---
    - http:
        path: /research/{researchId}/eye-tracking
        method: GET
        cors: true
    - http:
        path: /research/{researchId}/eye-tracking
        method: POST
        cors: true
    - http:
        path: /research/{researchId}/eye-tracking
        method: PUT
        cors: true
    - http:
        path: /research/{researchId}/eye-tracking
        method: DELETE
        cors: true

    # --- RUTA: Obtener resultados procesados de SmartVOC ---
    - http:
        path: /module-responses/smartvoc/{researchId}
        method: GET
        cors: true

    # --- RUTA: Obtener resultados específicos para CPVCard ---
    - http:
        path: /module-responses/cpv/{researchId}
        method: GET
        cors: true

    # --- RUTA: Obtener resultados específicos para TrustRelationshipFlow ---
    - http:
        path: /module-responses/trustflow/{researchId}
        method: GET
        cors: true

    # --- RUTA: Obtener respuestas agrupadas por pregunta para análisis estadísticos ---
    - http:
        path: /module-responses/grouped-by-question/{researchId}
        method: GET
        cors: true

    # --- RUTA: Crear nueva investigación ---
    - http:
        path: /research
        method: POST
        cors:
          origin: '*'
          headers:
            - Content-Type
            - X-Amz-Date
            - Authorization
            - X-Api-Key
            - X-Amz-Security-Token
            - X-Requested-With
            - Accept
            - Origin
            - Cache-Control
            - Pragma
          allowCredentials: false

    # --- RUTA: Obtener todas las investigaciones ---
    - http:
        path: /research
        method: GET
        cors:
          origin: '*'
          headers:
            - Content-Type
            - X-Amz-Date
            - Authorization
            - X-Api-Key
            - X-Amz-Security-Token
            - X-Requested-With
            - Accept
            - Origin
            - Cache-Control
            - Pragma
          allowCredentials: false

    # --- RUTA: OPTIONS para /research (CORS preflight) ---
    - http:
        path: /research
        method: OPTIONS
        cors:
          origin: '*'
          headers:
            - Content-Type
            - X-Amz-Date
            - Authorization
            - X-Api-Key
            - X-Amz-Security-Token
            - X-Requested-With
            - Accept
            - Origin
            - Cache-Control
            - Pragma
          allowCredentials: false

    # --- NUEVA RUTA: Obtener formularios/pasos de una investigación ---
    - http:
        path: /research/{researchId}/forms
        method: GET
        cors: true

    # --- RUTA: Eliminar investigación por ID ---
    - http:
        path: /research/{researchId}
        method: DELETE
        cors: true

    # --- RUTAS PARA RESEARCH IN PROGRESS ---
    # Obtener métricas de overview
    - http:
        path: /research/{researchId}/metrics
        method: GET
        cors: true

    # Obtener participantes con estados
    - http:
        path: /research/{researchId}/participants/status
        method: GET
        cors: true

    # Obtener participantes por research
    - http:
        path: /research/{researchId}/participants
        method: GET
        cors: true

    # Obtener detalles de participante específico
    - http:
        path: /research/{researchId}/participants/{participantId}
        method: GET
        cors: true

    # Eliminar participante específico
    - http:
        path: /research/{researchId}/participants/{participantId}
        method: DELETE
        cors: true

    # --- RUTAS DE ADMINISTRACIÓN ---
    - http:
        path: /admin/users
        method: GET
        cors: true
    - http:
        path: /admin/users
        method: POST
        cors: true
    - http:
        path: /admin/users/{id}
        method: GET
        cors: true
    - http:
        path: /admin/users/{id}
        method: PUT
        cors: true
    - http:
        path: /admin/users/{id}
        method: DELETE
        cors: true
    - http:
        path: /admin/users/stats
        method: GET
        cors: true
    - http:
        path: /admin/{proxy+}
        method: OPTIONS
        cors: true

    # Ruta genérica para el resto
    - http:
        path: /{proxy+}
        method: ANY
        cors: true
    - http:
        path: /
        method: ANY
        cors: true

  environment:
    DYNAMODB_TABLE: ${self:custom.tableName}
    CONNECTION_TYPE: http

# Función para WebSockets
websocket:
  handler: src/index.handler
  events:
    - websocket:
        route: $connect
    - websocket:
        route: $disconnect
    - websocket:
        route: $default
    - websocket:
        route: message
  environment:
    CONNECTION_TYPE: websocket

# Location Tracking Functions - TEMPORARILY DISABLED
# All location tracking functions are commented out due to aws-sdk v2 dependency issues
# saveLocation:
#   handler: src/controllers/locationTracking.controller.saveLocation
#   events:
#     - http:
#         path: location-tracking
#         method: post
#         cors: true
#         authorizer: aws_iam
#   environment:
#     LOCATION_TRACKING_TABLE: ${self:provider.environment.LOCATION_TRACKING_TABLE}

# getLocationsByResearchId:
#   handler: src/controllers/locationTracking.controller.getLocationsByResearchId
#   events:
#     - http:
#         path: location-tracking/{researchId}
#         method: get
#         cors: true
#         authorizer: aws_iam
#   environment:
#     LOCATION_TRACKING_TABLE: ${self:provider.environment.LOCATION_TRACKING_TABLE}

# getLocationStats:
#   handler: src/controllers/locationTracking.controller.getLocationStats
#   events:
#     - http:
#         path: location-tracking/{researchId}/stats
#         method: get
#         cors: true
#         authorizer: aws_iam
#   environment:
#     LOCATION_TRACKING_TABLE: ${self:provider.environment.LOCATION_TRACKING_TABLE}

# --- FUNCIONES PARA ANÁLISIS DE CUOTAS (NO LIMITA ENVÍO DE DATOS) ---
analyzeParticipantQuotas:
  handler: src/functions/quotaValidation.analyzeParticipantQuotas
  events:
    - http:
        path: quota-analysis/analyze
        method: POST
        cors: true
  environment:
    DYNAMODB_TABLE: ${self:provider.environment.DYNAMODB_TABLE}

getQuotaStats:
  handler: src/functions/quotaValidation.getQuotaStats
  events:
    - http:
        path: quota-analysis/stats/{researchId}
        method: GET
        cors: true
  environment:
    DYNAMODB_TABLE: ${self:provider.environment.DYNAMODB_TABLE}

resetQuotaCounters:
  handler: src/functions/quotaValidation.resetQuotaCounters
  events:
    - http:
        path: quota-analysis/reset
        method: POST
        cors: true
  environment:
    DYNAMODB_TABLE: ${self:provider.environment.DYNAMODB_TABLE}

# --- FUNCIONES PARA MONITOREO EN TIEMPO REAL ---
monitoringEvent:
  handler: src/controllers/monitoring.controller.handleMonitoringEvent
  events:
    - http:
        path: monitoring/event
        method: POST
        cors: true
  environment:
    DYNAMODB_TABLE: ${self:provider.environment.DYNAMODB_TABLE}

monitoringSubscribe:
  handler: src/controllers/monitoring.controller.subscribeToResearch
  events:
    - http:
        path: monitoring/subscribe
        method: POST
        cors: true
  environment:
    DYNAMODB_TABLE: ${self:provider.environment.DYNAMODB_TABLE}

# --- FUNCIONES PARA ADMINISTRACIÓN DE USUARIOS (Usando handler principal) ---
# Las rutas admin ahora se manejan a través del handler principal con routing
# Esta sección se mantiene comentada como referencia
# adminGetUsers:
#   handler: src/index.handler
#   events:
#     - http:
#         path: admin/users
#         method: GET
#         cors: true

# adminGetUser:
#   handler: src/index.handler
#   events:
#     - http:
#         path: admin/users/{id}
#         method: GET
#         cors: true

# adminCreateUser:
#   handler: src/index.handler
#   events:
#     - http:
#         path: admin/users
#         method: POST
#         cors: true

# adminUpdateUser:
#   handler: src/index.handler
#   events:
#     - http:
#         path: admin/users/{id}
#         method: PUT
#         cors: true

# adminDeleteUser:
#   handler: src/index.handler
#   events:
#     - http:
#         path: admin/users/{id}
#         method: DELETE
#         cors: true

# adminUserStats:
#   handler: src/index.handler
#   events:
#     - http:
#         path: admin/users/stats
#         method: GET
#         cors: true

# adminOptions:
#   handler: src/index.handler
#   events:
#     - http:
#         path: admin/{proxy+}
#         method: OPTIONS
#         cors: true
