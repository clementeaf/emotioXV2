# Permisos IAM para serverless.yml

role:
  statements:
    # Permisos CRUD para TODAS las tablas DynamoDB de este servicio/etapa
    - Effect: Allow
      Action:
        - dynamodb:Query
        - dynamodb:Scan
        - dynamodb:GetItem
        - dynamodb:PutItem
        - dynamodb:UpdateItem
        - dynamodb:DeleteItem
        - dynamodb:DescribeTable
      Resource:
        # ARN para TODAS las tablas de este servicio/etapa usando comodín '*'. Usamos Fn::Sub aquí.
        # Esto cubrirá las tablas cuyos nombres son como: emotioxv2-backend-<nombretabla>-dev
        - Fn::Sub: arn:aws:dynamodb:${AWS::Region}:${AWS::AccountId}:table/${self:service}-*-${self:provider.stage}
        # ARN para TODOS los índices de esas tablas
        - Fn::Sub: arn:aws:dynamodb:${AWS::Region}:${AWS::AccountId}:table/${self:service}-*-${self:provider.stage}/index/*

        # Las líneas explícitas para "ModuleResponses" literal se eliminan ya que ahora usamos una variable de entorno
        # y la tabla se crea con un nombre basado en el servicio y la etapa.
        # La regla genérica de arriba debería cubrir la nueva tabla ${self:provider.environment.MODULE_RESPONSES_TABLE}
        # si sigue el patrón ${self:service}-<algo>-${self:provider.stage},
        # que es el caso con ${self:service}-module-responses-${self:provider.stage}.

        # Las siguientes entradas parecen ser para una tabla diferente que NO sigue el patrón ${self:service}-*-${self:provider.stage}
        # Si 'emotioxv2-backend-table-dev' es el nombre literal de la tabla definida por ${self:provider.environment.DYNAMODB_TABLE}
        # y esta NO es igual a ${self:service}-table-${self:provider.stage}, entonces estas líneas explícitas son necesarias para ella.
        # Por consistencia, sería mejor que DYNAMODB_TABLE también siga el patrón ${self:service}-table-${self:provider.stage}
        # o usar Fn::GetAtt si es la tabla principal definida en resources.yml con un nombre lógico.
        - Fn::Sub: arn:aws:dynamodb:${AWS::Region}:${AWS::AccountId}:table/emotioxv2-backend-table-dev
        - Fn::Sub: arn:aws:dynamodb:${AWS::Region}:${AWS::AccountId}:table/emotioxv2-backend-table-dev/index/researchId-index
        - Fn::Sub: arn:aws:dynamodb:${AWS::Region}:${AWS::AccountId}:table/emotioxv2-backend-table-dev/index/EntityTypeSkIndex

    # Permisos para el bucket S3
    - Effect: Allow
      Action:
        - s3:GetObject
        - s3:PutObject
        - s3:PutObjectAcl
        - s3:DeleteObject
        - s3:ListBucket
        - s3:GetBucketLocation
        - s3:GetBucketPolicy
        - s3:GetObjectVersion
      Resource:
        # ARN del bucket referenciando el recurso lógico
        - Fn::GetAtt: [StorageBucket, Arn]
        # ARN para los objetos dentro del bucket
        - Fn::Join: ['', [Fn::GetAtt: [StorageBucket, Arn], '/*']]

    # Permisos básicos para Logging en CloudWatch
    - Effect: "Allow"
      Action:
        - "logs:CreateLogGroup"
        - "logs:CreateLogStream"
        - "logs:PutLogEvents"
      Resource:
        # ARN para los grupos de logs de las funciones de este stack
        - Fn::Sub: arn:aws:logs:${AWS::Region}:${AWS::AccountId}:log-group:/aws/lambda/${self:service}-${self:provider.stage}-*:*
