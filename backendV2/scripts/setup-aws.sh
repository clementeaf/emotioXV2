#!/bin/bash

# Script para configurar recursos AWS para EmotioXV2
# Aseg√∫rate de tener AWS CLI configurado con las credenciales apropiadas

set -e  # Salir si alg√∫n comando falla

# Variables de configuraci√≥n
ROLE_NAME="EmotioXV2-Lambda-Role"
POLICY_NAME="EmotioXV2-Lambda-Policy"
TABLE_NAME="emotioXV2-table-dev"
BUCKET_NAME="emotioxv2-uploads-dev"
REGION="us-east-1"

echo "üöÄ Configurando recursos AWS para EmotioXV2..."

# Funci√≥n para verificar si AWS CLI est√° instalado
check_aws_cli() {
    if ! command -v aws &> /dev/null; then
        echo "‚ùå AWS CLI no est√° instalado. Por favor inst√°lalo primero."
        echo "   Instrucciones: https://docs.aws.amazon.com/cli/latest/userguide/getting-started-install.html"
        exit 1
    fi
    echo "‚úÖ AWS CLI encontrado"
}

# Funci√≥n para verificar credenciales AWS
check_aws_credentials() {
    if ! aws sts get-caller-identity &> /dev/null; then
        echo "‚ùå No hay credenciales AWS configuradas o son inv√°lidas."
        echo "   Ejecuta: aws configure"
        exit 1
    fi
    echo "‚úÖ Credenciales AWS v√°lidas"
}

# Funci√≥n para crear el rol IAM
create_iam_role() {
    echo "üìã Creando rol IAM: $ROLE_NAME..."
    
    # Crear el rol si no existe
    if aws iam get-role --role-name "$ROLE_NAME" &> /dev/null; then
        echo "   Rol $ROLE_NAME ya existe"
    else
        aws iam create-role \
            --role-name "$ROLE_NAME" \
            --assume-role-policy-document file://aws-config/trust-policy.json \
            --description "Rol para Lambda functions de EmotioXV2"
        echo "   ‚úÖ Rol $ROLE_NAME creado"
    fi
    
    # Crear/actualizar la pol√≠tica personalizada
    echo "üìã Creando pol√≠tica: $POLICY_NAME..."
    
    # Intentar crear la pol√≠tica
    if aws iam create-policy \
        --policy-name "$POLICY_NAME" \
        --policy-document file://aws-config/iam-policy.json \
        --description "Pol√≠tica personalizada para EmotioXV2" &> /dev/null; then
        echo "   ‚úÖ Pol√≠tica $POLICY_NAME creada"
    else
        echo "   üìù Pol√≠tica $POLICY_NAME ya existe, actualizando..."
        # Obtener el ARN de la pol√≠tica existente
        POLICY_ARN=$(aws iam list-policies --query "Policies[?PolicyName=='$POLICY_NAME'].Arn" --output text)
        
        # Crear nueva versi√≥n de la pol√≠tica
        aws iam create-policy-version \
            --policy-arn "$POLICY_ARN" \
            --policy-document file://aws-config/iam-policy.json \
            --set-as-default
        echo "   ‚úÖ Pol√≠tica $POLICY_NAME actualizada"
    fi
    
    # Adjuntar la pol√≠tica al rol
    POLICY_ARN=$(aws iam list-policies --query "Policies[?PolicyName=='$POLICY_NAME'].Arn" --output text)
    aws iam attach-role-policy \
        --role-name "$ROLE_NAME" \
        --policy-arn "$POLICY_ARN"
    
    # Adjuntar pol√≠ticas b√°sicas de Lambda
    aws iam attach-role-policy \
        --role-name "$ROLE_NAME" \
        --policy-arn "arn:aws:iam::aws:policy/service-role/AWSLambdaBasicExecutionRole"
    
    echo "   ‚úÖ Pol√≠ticas adjuntadas al rol"
}

# Funci√≥n para crear bucket S3
create_s3_bucket() {
    echo "üìã Creando bucket S3: $BUCKET_NAME..."
    
    if aws s3api head-bucket --bucket "$BUCKET_NAME" &> /dev/null; then
        echo "   Bucket $BUCKET_NAME ya existe"
    else
        if [ "$REGION" = "us-east-1" ]; then
            aws s3api create-bucket --bucket "$BUCKET_NAME"
        else
            aws s3api create-bucket \
                --bucket "$BUCKET_NAME" \
                --region "$REGION" \
                --create-bucket-configuration LocationConstraint="$REGION"
        fi
        echo "   ‚úÖ Bucket $BUCKET_NAME creado"
    fi
    
    # Configurar CORS para el bucket
    cat > /tmp/cors-config.json << EOF
{
    "CORSRules": [
        {
            "AllowedHeaders": ["*"],
            "AllowedMethods": ["GET", "PUT", "POST", "DELETE", "HEAD"],
            "AllowedOrigins": ["*"],
            "ExposeHeaders": ["ETag"],
            "MaxAgeSeconds": 3000
        }
    ]
}
EOF
    
    aws s3api put-bucket-cors \
        --bucket "$BUCKET_NAME" \
        --cors-configuration file:///tmp/cors-config.json
    
    echo "   ‚úÖ CORS configurado para $BUCKET_NAME"
}

# Funci√≥n para inicializar DynamoDB (usando el script TypeScript)
init_dynamodb() {
    echo "üìã Inicializando DynamoDB..."
    
    # Verificar si Node.js est√° instalado
    if ! command -v node &> /dev/null; then
        echo "   ‚ö†Ô∏è  Node.js no encontrado. DynamoDB se inicializar√° autom√°ticamente en el primer request."
        return
    fi
    
    # Intentar ejecutar el script de inicializaci√≥n
    if [ -f "dist/utils/dynamodb-setup.js" ]; then
        node dist/utils/dynamodb-setup.js
    else
        echo "   ‚ö†Ô∏è  Script compilado no encontrado. Compila el proyecto primero con 'npm run build'"
        echo "   üìù DynamoDB se inicializar√° autom√°ticamente en el primer request."
    fi
}

# Funci√≥n para mostrar informaci√≥n de configuraci√≥n
show_config_info() {
    echo ""
    echo "üéâ Configuraci√≥n completada!"
    echo ""
    echo "üìã Informaci√≥n de recursos creados:"
    echo "   ‚Ä¢ Rol IAM: $ROLE_NAME"
    echo "   ‚Ä¢ Pol√≠tica: $POLICY_NAME"
    echo "   ‚Ä¢ Bucket S3: $BUCKET_NAME"
    echo "   ‚Ä¢ Tabla DynamoDB: $TABLE_NAME (se crear√° autom√°ticamente)"
    echo ""
    echo "üìù Pr√≥ximos pasos:"
    echo "   1. Actualiza tu .env con las credenciales AWS apropiadas"
    echo "   2. Compila el proyecto: npm run build"
    echo "   3. Despliega tu Lambda function usando el rol creado"
    echo ""
    echo "üîó ARN del rol para Lambda:"
    aws iam get-role --role-name "$ROLE_NAME" --query 'Role.Arn' --output text
    echo ""
}

# Funci√≥n principal
main() {
    echo "Regi√≥n AWS: $REGION"
    echo "Directorio actual: $(pwd)"
    echo ""
    
    check_aws_cli
    check_aws_credentials
    create_iam_role
    create_s3_bucket
    init_dynamodb
    show_config_info
}

# Ejecutar funci√≥n principal
main