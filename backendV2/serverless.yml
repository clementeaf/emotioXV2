service: emotioxv2-backend

frameworkVersion: '3'

plugins:
  - serverless-offline
  - serverless-dotenv-plugin
  - serverless-dynamodb-local
  - serverless-export-outputs
  - serverless-plugin-export-endpoints

# Configuración del paquete
package:
  individually: true
  patterns:
    - 'node_modules/**'
    - '!node_modules/@types/**'
    - '!node_modules/**/*.md'
    - '!node_modules/**/*.ts'
    - '!node_modules/**/*.map'
    - '!.git/**'
    - '!.serverless/**'
    - '!test/**'
    - '!src/**'
    - 'dist/**'
    - 'package.json'
    - '.env'

provider:
  name: aws
  runtime: nodejs18.x
  stage: ${opt:stage, 'dev'}
  region: ${opt:region, 'us-east-1'}
  memorySize: 512
  timeout: 10
  environment:
    NODE_ENV: ${self:provider.stage}
    APP_REGION: ${self:provider.region}
    USER_TABLE: ${self:service}-users-${self:provider.stage}
    DYNAMODB_TABLE: ${self:service}-table-${self:provider.stage}
    JWT_SECRET: ${env:JWT_SECRET, 'mi-clave-secreta-para-firmar-tokens'}
    TOKEN_EXPIRATION: '604800'
    USE_MOCK_DB: 'false'
    IS_OFFLINE: ${self:custom.isOffline, 'false'}
    ALLOWED_ORIGIN: ${env:ALLOWED_ORIGIN, 'http://localhost:4700'}
    S3_BUCKET_NAME: emotiox-v2-${self:provider.stage}-storage
    API_ENDPOINT: 
      Fn::Join:
        - ""
        - - "https://"
          - Ref: "ApiGatewayRestApi"
          - ".execute-api."
          - Ref: "AWS::Region"
          - ".amazonaws.com/${self:provider.stage}"
  
  # IAM roles
  iam:
    role:
      statements:
        - Effect: Allow
          Action:
            - dynamodb:Query
            - dynamodb:Scan
            - dynamodb:GetItem
            - dynamodb:PutItem
            - dynamodb:UpdateItem
            - dynamodb:DeleteItem
            - dynamodb:BatchGetItem
            - dynamodb:BatchWriteItem
            - dynamodb:DescribeTable
          Resource:
            - "arn:aws:dynamodb:${self:provider.region}:*:table/${self:provider.environment.USER_TABLE}"
            - "arn:aws:dynamodb:${self:provider.region}:*:table/${self:provider.environment.USER_TABLE}/index/*"
            - "arn:aws:dynamodb:${self:provider.region}:*:table/${self:provider.environment.DYNAMODB_TABLE}"
            - "arn:aws:dynamodb:${self:provider.region}:*:table/${self:provider.environment.DYNAMODB_TABLE}/index/*"
        # Permisos para S3
        - Effect: Allow
          Action:
            - s3:PutObject
            - s3:GetObject
            - s3:DeleteObject
            - s3:PutObjectAcl
            - s3:ListBucket
          Resource:
            - "arn:aws:s3:::${self:provider.environment.S3_BUCKET_NAME}"
            - "arn:aws:s3:::${self:provider.environment.S3_BUCKET_NAME}/*"

functions:
  api:
    handler: dist/backendV2/src/index.handler
    events:
      - http:
          path: /{proxy+}
          method: ANY
          cors:
            origin: '*'
            headers:
              - Content-Type
              - X-Amz-Date
              - Authorization
              - X-Api-Key
              - X-Amz-Security-Token
              - X-Amz-User-Agent
              - X-Requested-With
              - Accept
              - Cache-Control
              - cache-control
              - Pragma
              - pragma
            allowCredentials: true
      - http:
          path: /
          method: ANY
          cors:
            origin: '*'
            headers:
              - Content-Type
              - X-Amz-Date
              - Authorization
              - X-Api-Key
              - X-Amz-Security-Token
              - X-Amz-User-Agent
              - X-Requested-With
              - Accept
              - Cache-Control
              - cache-control
              - Pragma
              - pragma
            allowCredentials: true
      - http:
          path: /eye-tracking
          method: ANY
          cors:
            origin: '*'
            headers:
              - Content-Type
              - X-Amz-Date
              - Authorization
              - X-Api-Key
              - X-Amz-Security-Token
              - X-Amz-User-Agent
              - X-Requested-With
              - Accept
              - Cache-Control
              - cache-control
              - Pragma
              - pragma
            allowCredentials: true
      - http:
          path: /eye-tracking/{proxy+}
          method: ANY
          cors:
            origin: '*'
            headers:
              - Content-Type
              - X-Amz-Date
              - Authorization
              - X-Api-Key
              - X-Amz-Security-Token
              - X-Amz-User-Agent
              - X-Requested-With
              - Accept
              - Cache-Control
              - cache-control
              - Pragma
              - pragma
            allowCredentials: true
      - http:
          path: /smart-voc
          method: ANY
          cors:
            origin: '*'
            headers:
              - Content-Type
              - X-Amz-Date
              - Authorization
              - X-Api-Key
              - X-Amz-Security-Token
              - X-Amz-User-Agent
              - X-Requested-With
              - Accept
              - Cache-Control
              - cache-control
              - Pragma
              - pragma
            allowCredentials: true
      - http:
          path: /smart-voc/{proxy+}
          method: ANY
          cors:
            origin: '*'
            headers:
              - Content-Type
              - X-Amz-Date
              - Authorization
              - X-Api-Key
              - X-Amz-Security-Token
              - X-Amz-User-Agent
              - X-Requested-With
              - Accept
              - Cache-Control
              - cache-control
              - Pragma
              - pragma
            allowCredentials: true
      # Rutas para cognitive-task
      - http:
          path: /cognitive-task
          method: ANY
          cors:
            origin: '*'
            headers:
              - Content-Type
              - X-Amz-Date
              - Authorization
              - X-Api-Key
              - X-Amz-Security-Token
              - X-Amz-User-Agent
              - X-Requested-With
              - Accept
              - Cache-Control
              - cache-control
              - Pragma
              - pragma
            allowCredentials: true
      - http:
          path: /cognitive-task/{proxy+}
          method: ANY
          cors:
            origin: '*'
            headers:
              - Content-Type
              - X-Amz-Date
              - Authorization
              - X-Api-Key
              - X-Amz-Security-Token
              - X-Amz-User-Agent
              - X-Requested-With
              - Accept
              - Cache-Control
              - cache-control
              - Pragma
              - pragma
            allowCredentials: true
      # Rutas para eye-tracking-recruit
      - http:
          path: /eye-tracking-recruit
          method: ANY
          cors:
            origin: '*'
            headers:
              - Content-Type
              - X-Amz-Date
              - Authorization
              - X-Api-Key
              - X-Amz-Security-Token
              - X-Amz-User-Agent
              - X-Requested-With
              - Accept
              - Cache-Control
              - cache-control
              - Pragma
              - pragma
            allowCredentials: true
      - http:
          path: /eye-tracking-recruit/{proxy+}
          method: ANY
          cors:
            origin: '*'
            headers:
              - Content-Type
              - X-Amz-Date
              - Authorization
              - X-Api-Key
              - X-Amz-Security-Token
              - X-Amz-User-Agent
              - X-Requested-With
              - Accept
              - Cache-Control
              - cache-control
              - Pragma
              - pragma
            allowCredentials: true
      # Rutas explícitas para el servicio S3
      - http:
          path: /s3/upload
          method: POST
          cors:
            origin: '*'
            headers:
              - Content-Type
              - X-Amz-Date
              - Authorization
              - X-Api-Key
              - X-Amz-Security-Token
              - X-Amz-User-Agent
              - X-Requested-With
              - Accept
              - Cache-Control
              - cache-control
              - Pragma
              - pragma
            allowCredentials: true
      - http:
          path: /s3/download/{key}
          method: GET
          cors:
            origin: '*'
            headers:
              - Content-Type
              - X-Amz-Date
              - Authorization
              - X-Api-Key
              - X-Amz-Security-Token
              - X-Amz-User-Agent
              - X-Requested-With
              - Accept
              - Cache-Control
              - cache-control
              - Pragma
              - pragma
            allowCredentials: true
      - http:
          path: /s3/delete/{key}
          method: DELETE
          cors:
            origin: '*'
            headers:
              - Content-Type
              - X-Amz-Date
              - Authorization
              - X-Api-Key
              - X-Amz-Security-Token
              - X-Amz-User-Agent
              - X-Requested-With
              - Accept
              - Cache-Control
              - cache-control
              - Pragma
              - pragma
            allowCredentials: true
  
  websocket:
    handler: dist/backendV2/src/index.handler
    events:
      - websocket:
          route: $connect
      - websocket:
          route: $disconnect
      - websocket:
          route: $default

resources:
  Resources:
    UsersTable:
      Type: AWS::DynamoDB::Table
      Properties:
        TableName: ${self:provider.environment.USER_TABLE}
        BillingMode: PAY_PER_REQUEST
        AttributeDefinitions:
          - AttributeName: id
            AttributeType: S
          - AttributeName: email
            AttributeType: S
        KeySchema:
          - AttributeName: id
            KeyType: HASH
        GlobalSecondaryIndexes:
          - IndexName: EmailIndex
            KeySchema:
              - AttributeName: email
                KeyType: HASH
            Projection:
              ProjectionType: ALL
        SSESpecification:
          SSEEnabled: true
    
    DynamoDBTable:
      Type: AWS::DynamoDB::Table
      Properties:
        TableName: ${self:provider.environment.DYNAMODB_TABLE}
        BillingMode: PAY_PER_REQUEST
        AttributeDefinitions:
          - AttributeName: id
            AttributeType: S
          - AttributeName: sk
            AttributeType: S
          - AttributeName: userId
            AttributeType: S
          - AttributeName: researchId
            AttributeType: S
        KeySchema:
          - AttributeName: id
            KeyType: HASH
          - AttributeName: sk
            KeyType: RANGE
        GlobalSecondaryIndexes:
          - IndexName: userId-index
            KeySchema:
              - AttributeName: userId
                KeyType: HASH
            Projection:
              ProjectionType: ALL
          - IndexName: researchId-index
            KeySchema:
              - AttributeName: researchId
                KeyType: HASH
            Projection:
              ProjectionType: ALL
        SSESpecification:
          SSEEnabled: true
    
    # Configuración CORS para API Gateway
    GatewayResponseDefault4XX:
      Type: 'AWS::ApiGateway::GatewayResponse'
      Properties:
        ResponseParameters:
          gatewayresponse.header.Access-Control-Allow-Origin: "'*'"
          gatewayresponse.header.Access-Control-Allow-Headers: "'Content-Type, Authorization, X-Amz-Date, X-Api-Key, X-Amz-Security-Token, X-Requested-With, x-requested-with, Accept, Cache-Control, cache-control, Pragma, pragma, X-Amz-User-Agent'"
          gatewayresponse.header.Access-Control-Allow-Methods: "'GET, POST, PUT, DELETE, OPTIONS, PATCH'"
          gatewayresponse.header.Access-Control-Allow-Credentials: "'true'"
        ResponseType: DEFAULT_4XX
        RestApiId:
          Ref: 'ApiGatewayRestApi'
    
    GatewayResponseDefault5XX:
      Type: 'AWS::ApiGateway::GatewayResponse'
      Properties:
        ResponseParameters:
          gatewayresponse.header.Access-Control-Allow-Origin: "'*'"
          gatewayresponse.header.Access-Control-Allow-Headers: "'Content-Type, Authorization, X-Amz-Date, X-Api-Key, X-Amz-Security-Token, X-Requested-With, x-requested-with, Accept, Cache-Control, cache-control, Pragma, pragma, X-Amz-User-Agent'"
          gatewayresponse.header.Access-Control-Allow-Methods: "'GET, POST, PUT, DELETE, OPTIONS, PATCH'"
          gatewayresponse.header.Access-Control-Allow-Credentials: "'true'"
        ResponseType: DEFAULT_5XX
        RestApiId:
          Ref: 'ApiGatewayRestApi'

custom:
  serverless-offline:
    httpPort: 3000
    lambdaPort: 3002
    websocketPort: 3001
  
  useMockDb:
    dev: 'false'
    test: 'false'
    prod: 'false'
  
  dynamodb:
    start:
      port: 8000
      inMemory: true
      migrate: true
    stages:
      - dev
    migration:
      dir: migrations
  
  isOffline: ${opt:offline, 'false'}
  
  exportOutputs:
    fileName: outputs.json
    include:
      - ServiceEndpoint
      - WebsocketEndpoint
  
  exportEndpoints:
    fileName: endpoints.json
    include:
      - 'http'
      - 'httpApi'
