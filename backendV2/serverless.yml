service: emotioxv2-backend

frameworkVersion: '3'

plugins:
  - serverless-esbuild
  - serverless-offline
  - serverless-dotenv-plugin
  - serverless-export-outputs
  - serverless-plugin-export-endpoints

# Configuración de esbuild para compilación TypeScript optimizada
custom:
  esbuild:
    bundle: true
    minify: true
    sourcemap: true
    exclude: []
    target: 'node18'
    define:
      'process.env.NODE_ENV': '"${self:provider.stage}"'
    platform: 'node'
    concurrency: 10
    keepOutputDirectory: false

  # Definición de nombres de recursos
  tableName: ${self:service}-researches-${self:provider.stage} # Tabla para Investigaciones
  usersTableName: ${self:service}-users-${self:provider.stage} # Tabla para Usuarios
  s3BucketName: ${self:service}-${self:provider.stage}-storage # Bucket S3
  eyeTrackingRecruitConfigTable: ${self:service}-eye-tracking-recruit-config-${self:provider.stage}
  eyeTrackingRecruitParticipantTable: ${self:service}-eye-tracking-recruit-participant-${self:provider.stage}
  recruitmentLinkTable: ${self:service}-recruitment-link-${self:provider.stage}

  # Configuración para entorno de desarrollo
  serverless-offline:
    httpPort: 3000
    lambdaPort: 3002
    websocketPort: 3001
    noPrependStageInUrl: true
    allowCache: true
    
  # Exportar endpoints para frontend
  exportOutputs:
    include:
      - HttpApiUrl
      - WebsocketApiUrl
    output:
      file: ./endpoints-output.json
  
  exportEndpoints:
    fileName: ./endpoints.json
    include:
      - 'http'
      - 'httpApi'
      - 'websocket'

  # Variables de entorno dinámicas
  stages:
    dev: 
      apiGatewayCors: '*'
    prod:
      apiGatewayCors: ${env:ALLOWED_ORIGIN, '*'}

provider:
  name: aws
  runtime: nodejs18.x
  stage: ${opt:stage, 'dev'}
  region: ${opt:region, 'us-east-1'}
  memorySize: 1024
  timeout: 30
  logRetentionInDays: 7
  
  # Variables de entorno dinámicas
  environment:
    NODE_ENV: ${self:provider.stage}
    STAGE: ${self:provider.stage}
    AWS_NODEJS_CONNECTION_REUSE_ENABLED: 1
    APP_REGION: ${self:provider.region}
    API_ENDPOINT: 
      Fn::Join:
        - ""
        - - "https://"
          - Ref: "ApiGatewayRestApi"
          - ".execute-api.${self:provider.region}.amazonaws.com/${self:provider.stage}"
    WEBSOCKET_ENDPOINT: 
      Fn::Join:
        - ""
        - - "wss://"
          - Ref: "WebsocketsApi"
          - ".execute-api.${self:provider.region}.amazonaws.com/${self:provider.stage}"
    USER_TABLE: ${self:custom.usersTableName}
    DYNAMODB_TABLE: ${self:service}-table-${self:provider.stage}
    PARTICIPANT_TABLE: ${self:service}-participants-${self:provider.stage}
    JWT_SECRET: ${env:JWT_SECRET, 'mi-clave-secreta-para-firmar-tokens'}
    TOKEN_EXPIRATION: '604800'
    S3_BUCKET_NAME: ${self:custom.s3BucketName}
    EYETRACKING_RECRUIT_CONFIG_TABLE: ${self:custom.eyeTrackingRecruitConfigTable}
    EYETRACKING_RECRUIT_PARTICIPANT_TABLE: ${self:custom.eyeTrackingRecruitParticipantTable}
    RECRUITMENT_LINK_TABLE: ${self:custom.recruitmentLinkTable}
    EMAIL_FROM: process.env.EMAIL_FROM
    EMAIL_TO: process.env.EMAIL_TO
    TABLE_NAME: ${self:custom.tableName}
  
  # IAM roles unificados con acceso completo a recursos
  iam:
    role:
      statements:
        # Acceso completo a DynamoDB (todas las tablas del servicio)
        - Effect: Allow
          Action:
            - dynamodb:Query
            - dynamodb:Scan
            - dynamodb:GetItem
            - dynamodb:PutItem
            - dynamodb:UpdateItem
            - dynamodb:DeleteItem
            - dynamodb:BatchGetItem
            - dynamodb:BatchWriteItem
            - dynamodb:DescribeTable
          Resource:
            - "arn:aws:dynamodb:${self:provider.region}:*:table/${self:service}-*-${self:provider.stage}"
            - "arn:aws:dynamodb:${self:provider.region}:*:table/${self:service}-*-${self:provider.stage}/index/*"
        
        # Acceso completo a S3
        - Effect: Allow
          Action:
            - s3:PutObject
            - s3:GetObject
            - s3:DeleteObject
            - s3:PutObjectAcl
            - s3:ListBucket
            - s3:HeadObject
            - s3:GetObjectTagging
            - s3:PutObjectTagging
          Resource:
            - "arn:aws:s3:::${self:provider.environment.S3_BUCKET_NAME}"
            - "arn:aws:s3:::${self:provider.environment.S3_BUCKET_NAME}/*"

functions:
  # Función principal para API REST - maneja todas las rutas
  api:
    handler: src/index.handler
    events:
      - http:
          path: /{proxy+} # Una sola ruta para todas las peticiones
          method: ANY
          cors: true
      - http:
          path: / # Ruta raíz
          method: ANY
          cors: true
    environment:
      CONNECTION_TYPE: http

  # Función para WebSockets
  websocket:
    handler: src/index.handler
    events:
      - websocket:
          route: $connect
      - websocket:
          route: $disconnect
      - websocket:
          route: $default
      - websocket:
          route: message
    environment: 
      CONNECTION_TYPE: websocket

resources:
  Resources:
    # Bucket S3 para almacenamiento
    StorageBucket:
      Type: AWS::S3::Bucket
      Properties:
        BucketName: ${self:provider.environment.S3_BUCKET_NAME}
        CorsConfiguration:
          CorsRules:
            - AllowedHeaders:
                - '*'
              AllowedMethods:
                - GET
                - PUT
                - POST
                - DELETE
                - HEAD
              AllowedOrigins:
                - '*'
              MaxAge: 3000
        PublicAccessBlockConfiguration:
          BlockPublicAcls: false
          BlockPublicPolicy: false
          IgnorePublicAcls: false
          RestrictPublicBuckets: false
    
    # Tabla de usuarios
    UsersTable:
      Type: AWS::DynamoDB::Table
      Properties:
        TableName: ${self:provider.environment.USER_TABLE}
        BillingMode: PAY_PER_REQUEST
        AttributeDefinitions:
          - AttributeName: id
            AttributeType: S
          - AttributeName: email
            AttributeType: S
        KeySchema:
          - AttributeName: id
            KeyType: HASH
        GlobalSecondaryIndexes:
          - IndexName: EmailIndex
            KeySchema:
              - AttributeName: email
                KeyType: HASH
            Projection:
              ProjectionType: ALL
        PointInTimeRecoverySpecification:
          PointInTimeRecoveryEnabled: true
        SSESpecification:
          SSEEnabled: true
    
    # Tabla principal DynamoDB
    DynamoDBTable:
      Type: AWS::DynamoDB::Table
      Properties:
        TableName: ${self:provider.environment.DYNAMODB_TABLE}
        BillingMode: PAY_PER_REQUEST
        AttributeDefinitions:
          - AttributeName: id
            AttributeType: S
          - AttributeName: sk
            AttributeType: S
          - AttributeName: userId
            AttributeType: S
          - AttributeName: researchId
            AttributeType: S
          - AttributeName: EntityType
            AttributeType: S
        KeySchema:
          - AttributeName: id
            KeyType: HASH
          - AttributeName: sk
            KeyType: RANGE
        GlobalSecondaryIndexes:
          - IndexName: userId-index
            KeySchema:
              - AttributeName: userId
                KeyType: HASH
            Projection:
              ProjectionType: ALL
          - IndexName: researchId-index
            KeySchema:
              - AttributeName: researchId
                KeyType: HASH
            Projection:
              ProjectionType: ALL
          - IndexName: EntityTypeSkIndex
            KeySchema:
              - AttributeName: EntityType
                KeyType: HASH
              - AttributeName: sk
                KeyType: RANGE
            Projection:
              ProjectionType: ALL
        PointInTimeRecoverySpecification:
          PointInTimeRecoveryEnabled: true
        SSESpecification:
          SSEEnabled: true
    
    # Tabla EyeTracking Recruit Config
    EyeTrackingRecruitConfigTable:
      Type: AWS::DynamoDB::Table
      Properties:
        TableName: ${self:provider.environment.EYETRACKING_RECRUIT_CONFIG_TABLE}
        BillingMode: PAY_PER_REQUEST
        AttributeDefinitions:
          - AttributeName: PK
            AttributeType: S
          - AttributeName: SK
            AttributeType: S
          - AttributeName: GSI1PK
            AttributeType: S
          - AttributeName: GSI1SK
            AttributeType: S
        KeySchema:
          - AttributeName: PK
            KeyType: HASH
          - AttributeName: SK
            KeyType: RANGE
        GlobalSecondaryIndexes:
          - IndexName: GSI1
            KeySchema:
              - AttributeName: GSI1PK
                KeyType: HASH
              - AttributeName: GSI1SK
                KeyType: RANGE
            Projection:
              ProjectionType: ALL
        PointInTimeRecoverySpecification:
          PointInTimeRecoveryEnabled: true
        SSESpecification:
          SSEEnabled: true
    
    # Tabla EyeTracking Recruit Participant
    EyeTrackingRecruitParticipantTable:
      Type: AWS::DynamoDB::Table
      Properties:
        TableName: ${self:provider.environment.EYETRACKING_RECRUIT_PARTICIPANT_TABLE}
        BillingMode: PAY_PER_REQUEST
        AttributeDefinitions:
          - AttributeName: PK
            AttributeType: S
          - AttributeName: SK
            AttributeType: S
          - AttributeName: GSI1PK
            AttributeType: S
          - AttributeName: GSI1SK
            AttributeType: S
          - AttributeName: GSI2PK
            AttributeType: S
          - AttributeName: GSI2SK
            AttributeType: S
        KeySchema:
          - AttributeName: PK
            KeyType: HASH
          - AttributeName: SK
            KeyType: RANGE
        GlobalSecondaryIndexes:
          - IndexName: GSI1
            KeySchema:
              - AttributeName: GSI1PK
                KeyType: HASH
              - AttributeName: GSI1SK
                KeyType: RANGE
            Projection:
              ProjectionType: ALL
          - IndexName: GSI2
            KeySchema:
              - AttributeName: GSI2PK
                KeyType: HASH
              - AttributeName: GSI2SK
                KeyType: RANGE
            Projection:
              ProjectionType: ALL
        PointInTimeRecoverySpecification:
          PointInTimeRecoveryEnabled: true
        SSESpecification:
          SSEEnabled: true
    
    # Tabla Recruitment Link
    RecruitmentLinkTable:
      Type: AWS::DynamoDB::Table
      Properties:
        TableName: ${self:provider.environment.RECRUITMENT_LINK_TABLE}
        BillingMode: PAY_PER_REQUEST
        AttributeDefinitions:
          - AttributeName: PK
            AttributeType: S
          - AttributeName: SK
            AttributeType: S
          - AttributeName: GSI1PK
            AttributeType: S
          - AttributeName: GSI1SK
            AttributeType: S
          - AttributeName: token
            AttributeType: S
        KeySchema:
          - AttributeName: PK
            KeyType: HASH
          - AttributeName: SK
            KeyType: RANGE
        GlobalSecondaryIndexes:
          - IndexName: GSI1
            KeySchema:
              - AttributeName: GSI1PK
                KeyType: HASH
              - AttributeName: GSI1SK
                KeyType: RANGE
            Projection:
              ProjectionType: ALL
          - IndexName: TokenIndex
            KeySchema:
              - AttributeName: token
                KeyType: HASH
            Projection:
              ProjectionType: ALL
        PointInTimeRecoverySpecification:
          PointInTimeRecoveryEnabled: true
        SSESpecification:
          SSEEnabled: true
    
    # Tabla de participantes
    ParticipantTable:
      Type: AWS::DynamoDB::Table
      Properties:
        TableName: ${self:provider.environment.PARTICIPANT_TABLE}
        BillingMode: PAY_PER_REQUEST
        AttributeDefinitions:
          - AttributeName: id
            AttributeType: S
          - AttributeName: email
            AttributeType: S
        KeySchema:
          - AttributeName: id
            KeyType: HASH
        GlobalSecondaryIndexes:
          - IndexName: EmailIndex
            KeySchema:
              - AttributeName: email
                KeyType: HASH
            Projection:
              ProjectionType: ALL
        PointInTimeRecoverySpecification:
          PointInTimeRecoveryEnabled: true
        SSESpecification:
          SSEEnabled: true
        StreamSpecification:
          StreamViewType: NEW_AND_OLD_IMAGES

  # Outputs para exportar automáticamente
  Outputs:
    HttpApiUrl:
      Description: URL of the HTTP API
      Value:
        Fn::Join:
          - ""
          - - "https://"
            - Ref: "ApiGatewayRestApi"
            - ".execute-api.${self:provider.region}.amazonaws.com/${self:provider.stage}"
      Export:
        Name: ${self:service}-${self:provider.stage}-HttpApiUrl
    
    WebsocketApiUrl:
      Description: URL of the WebSocket API
      Value:
        Fn::Join:
          - ""
          - - "wss://"
            - Ref: "WebsocketsApi"
            - ".execute-api.${self:provider.region}.amazonaws.com/${self:provider.stage}"
      Export:
        Name: ${self:service}-${self:provider.stage}-WebsocketApiUrl
    
    ServiceName:
      Description: Nombre del servicio
      Value: ${self:service}
      Export:
        Name: ${self:service}-${self:provider.stage}-ServiceName
    
    Stage:
      Description: Etapa de despliegue
      Value: ${self:provider.stage}
      Export:
        Name: ${self:service}-${self:provider.stage}-Stage
