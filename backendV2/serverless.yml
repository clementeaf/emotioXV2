service: emotioxv2-backend

frameworkVersion: '3'

plugins:
  - serverless-esbuild
  - serverless-offline
  - serverless-dotenv-plugin
  - serverless-export-outputs
  - serverless-plugin-export-endpoints

# Configuración de esbuild para compilación TypeScript optimizada
custom:
  tableName: ${self:service}-researches-${self:provider.stage} # Tabla para Investigaciones
  usersTableName: ${self:service}-users-${self:provider.stage} # Tabla para Usuarios
  s3BucketName: ${self:service}-${self:provider.stage}-storage # Bucket S3
  eyeTrackingRecruitConfigTable: ${self:service}-eye-tracking-recruit-config-${self:provider.stage}
  eyeTrackingRecruitParticipantTable: ${self:service}-eye-tracking-recruit-participant-${self:provider.stage}
  recruitmentLinkTable: ${self:service}-recruitment-link-${self:provider.stage}

  # Configuración para entorno de desarrollo
  serverless-offline:
    httpPort: 3000
    lambdaPort: 3002
    websocketPort: 3001
    noPrependStageInUrl: true
    allowCache: true

  # Exportar endpoints para frontend
  exportOutputs:
    include:
      - HttpApiUrl
      - WebsocketApiUrl
    output:
      file: ./endpoints-output.json

  exportEndpoints:
    fileName: ./endpoints.json
    include:
      - 'http'
      - 'httpApi'
      - 'websocket'

  # Variables de entorno dinámicas
  stages:
    dev:
      apiGatewayCors: '*'
    prod:
      apiGatewayCors: ${env:ALLOWED_ORIGIN, '*'}

provider:
  name: aws
  runtime: nodejs18.x
  stage: ${opt:stage, 'dev'}
  region: ${opt:region, 'us-east-1'}
  memorySize: 1024
  timeout: 30
  logRetentionInDays: 7

  stackTags:
    SERVICE_NAME: ${self:service}
    STAGE: ${self:provider.stage}

  apiGateway:
    shouldStartNameWithService: true
    # Mantener la configuración de caché comentada por ahora
    # cacheClusterEnabled: true
    # cacheClusterSize: '0.5'
    # cacheDataEncrypted: true
    # cacheTtlInSeconds: 300

  environment: ${file(./environment-variables.yml)}
  iam: ${file(./iam-permissions.yml)}

  # Configuración de esbuild
  esbuild:
    bundle: true
    minify: false
    sourcemap: true
    exclude: ['aws-sdk']
    target: 'node18'
    platform: 'node'
    concurrency: 10

functions:
  # Location Tracking
  saveLocation:
    handler: src/controllers/locationTracking.controller.saveLocation
    events:
      - http:
          path: location-tracking
          method: post
          cors: true
          authorizer: aws_iam
    environment:
      LOCATION_TRACKING_TABLE: ${self:custom.environment.LOCATION_TRACKING_TABLE}

  getLocationsByResearchId:
    handler: src/controllers/locationTracking.controller.getLocationsByResearchId
    events:
      - http:
          path: location-tracking/{researchId}
          method: get
          cors: true
          authorizer: aws_iam
    environment:
      LOCATION_TRACKING_TABLE: ${self:custom.environment.LOCATION_TRACKING_TABLE}

  getLocationStats:
    handler: src/controllers/locationTracking.controller.getLocationStats
    events:
      - http:
          path: location-tracking/{researchId}/stats
          method: get
          cors: true
          authorizer: aws_iam
    environment:
      LOCATION_TRACKING_TABLE: ${self:custom.environment.LOCATION_TRACKING_TABLE}

resources:
  Resources:
    # Location Tracking Table
    LocationTrackingTable:
      Type: AWS::DynamoDB::Table
      Properties:
        TableName: ${self:custom.environment.LOCATION_TRACKING_TABLE}
        BillingMode: PAY_PER_REQUEST
        AttributeDefinitions:
          - AttributeName: id
            AttributeType: S
          - AttributeName: researchId
            AttributeType: S
        KeySchema:
          - AttributeName: id
            KeyType: HASH
        GlobalSecondaryIndexes:
          - IndexName: ResearchIdIndex
            KeySchema:
              - AttributeName: researchId
                KeyType: HASH
            Projection:
              ProjectionType: ALL
  Outputs: ${file(./outputs.yml)}
