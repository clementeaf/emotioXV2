service: emotioxv2-backend

frameworkVersion: '3'

plugins:
  - serverless-esbuild
  - serverless-offline
  - serverless-dotenv-plugin
  - serverless-export-outputs
  - serverless-plugin-export-endpoints

# Configuración de esbuild para compilación TypeScript optimizada
custom:
  esbuild:
    bundle: true
    minify: true
    sourcemap: true
    exclude: []
    target: 'node18'
    define:
      'process.env.NODE_ENV': '"${self:provider.stage}"'
    platform: 'node'
    concurrency: 10
    keepOutputDirectory: false

  # Definición de nombres de recursos
  tableName: ${self:service}-researches-${self:provider.stage} # Tabla para Investigaciones
  usersTableName: ${self:service}-users-${self:provider.stage} # Tabla para Usuarios
  s3BucketName: ${self:service}-${self:provider.stage}-storage # Bucket S3
  eyeTrackingRecruitConfigTable: ${self:service}-eye-tracking-recruit-config-${self:provider.stage}
  eyeTrackingRecruitParticipantTable: ${self:service}-eye-tracking-recruit-participant-${self:provider.stage}
  recruitmentLinkTable: ${self:service}-recruitment-link-${self:provider.stage}

  # Configuración para entorno de desarrollo
  serverless-offline:
    httpPort: 3000
    lambdaPort: 3002
    websocketPort: 3001
    noPrependStageInUrl: true
    allowCache: true
    
  # Exportar endpoints para frontend
  exportOutputs:
    include:
      - HttpApiUrl
      - WebsocketApiUrl
    output:
      file: ./endpoints-output.json
  
  exportEndpoints:
    fileName: ./endpoints.json
    include:
      - 'http'
      - 'httpApi'
      - 'websocket'

  # Variables de entorno dinámicas
  stages:
    dev: 
      apiGatewayCors: '*'
    prod:
      apiGatewayCors: ${env:ALLOWED_ORIGIN, '*'}

provider:
  name: aws
  runtime: nodejs18.x
  stage: ${opt:stage, 'dev'}
  region: ${opt:region, 'us-east-1'}
  memorySize: 1024
  timeout: 30
  logRetentionInDays: 7
  
  # Variables de entorno dinámicas
  environment:
    NODE_ENV: ${self:provider.stage}
    STAGE: ${self:provider.stage}
    AWS_NODEJS_CONNECTION_REUSE_ENABLED: 1
    APP_REGION: ${self:provider.region}
    API_ENDPOINT: 
      Fn::Join:
        - ""
        - - "https://"
          - Ref: "ApiGatewayRestApi"
          - ".execute-api.${self:provider.region}.amazonaws.com/${self:provider.stage}"
    WEBSOCKET_ENDPOINT: 
      Fn::Join:
        - ""
        - - "wss://"
          - Ref: "WebsocketsApi"
          - ".execute-api.${self:provider.region}.amazonaws.com/${self:provider.stage}"
    USER_TABLE: ${self:custom.usersTableName}
    DYNAMODB_TABLE: ${self:service}-table-${self:provider.stage}
    PARTICIPANT_TABLE: ${self:service}-participants-${self:provider.stage}
    JWT_SECRET: ${env:JWT_SECRET, 'mi-clave-secreta-para-firmar-tokens'}
    TOKEN_EXPIRATION: '604800'
    S3_BUCKET_NAME: ${self:custom.s3BucketName}
    EYETRACKING_RECRUIT_CONFIG_TABLE: ${self:custom.eyeTrackingRecruitConfigTable}
    EYETRACKING_RECRUIT_PARTICIPANT_TABLE: ${self:custom.eyeTrackingRecruitParticipantTable}
    RECRUITMENT_LINK_TABLE: ${self:custom.recruitmentLinkTable}
    EMAIL_FROM: process.env.EMAIL_FROM
    EMAIL_TO: process.env.EMAIL_TO
    TABLE_NAME: ${self:custom.tableName}
  
  # Definir las declaraciones IAM directamente aquí
  iam:
    role:
      statements:
        # Permisos CRUD para TODAS las tablas DynamoDB de este servicio/etapa
        - Effect: Allow
          Action:
            - dynamodb:Query
            - dynamodb:Scan
            - dynamodb:GetItem
            - dynamodb:PutItem
            - dynamodb:UpdateItem
            - dynamodb:DeleteItem
            - dynamodb:DescribeTable
          Resource:
            # ARN para TODAS las tablas de este servicio/etapa usando comodín '*'. Usamos Fn::Sub aquí.
            - Fn::Sub: arn:aws:dynamodb:\${AWS::Region}:\${AWS::AccountId}:table/${self:service}-*-${self:provider.stage}
            # ARN para TODOS los índices de esas tablas
            - Fn::Sub: arn:aws:dynamodb:\${AWS::Region}:\${AWS::AccountId}:table/${self:service}-*-${self:provider.stage}/index/*
            
        # Permisos para el bucket S3
        - Effect: Allow
          Action:
            - s3:GetObject
            - s3:PutObject
            - s3:PutObjectAcl
            - s3:DeleteObject
            - s3:ListBucket
          Resource:
            # ARN del bucket referenciando el recurso lógico
            - Fn::GetAtt: [StorageBucket, Arn] 
            # ARN para los objetos dentro del bucket
            - Fn::Join: [\'\', [Fn::GetAtt: [StorageBucket, Arn], \'/*\']]

        # Permisos básicos para Logging en CloudWatch
        - Effect: "Allow"
          Action:
            - "logs:CreateLogGroup"
            - "logs:CreateLogStream"
            - "logs:PutLogEvents"
          Resource: 
            # ARN para los grupos de logs de las funciones de este stack
            - Fn::Sub: arn:aws:logs:\${AWS::Region}:\${AWS::AccountId}:log-group:/aws/lambda/${self:service}-${self:provider.stage}-*:*

functions:
  # Función principal para API REST - maneja todas las rutas
  api:
    handler: src/index.handler
    events:
      - http:
          path: /{proxy+} # Una sola ruta para todas las peticiones
          method: ANY
          cors: true
      - http:
          path: / # Ruta raíz
          method: ANY
          cors: true
    environment:
      CONNECTION_TYPE: http

  # Función para WebSockets
  websocket:
    handler: src/index.handler
    events:
      - websocket:
          route: $connect
      - websocket:
          route: $disconnect
      - websocket:
          route: $default
      - websocket:
          route: message
    environment: 
      CONNECTION_TYPE: websocket

# Recursos y Outputs
resources:
  Resources: ${file(./resources.yml)} # Referencia al contenido del archivo bajo la clave Resources
  Outputs:
    # Usando Fn::Sub para construir la URL (SIN barras invertidas antes de $)
    HttpApiUrl:
      Description: URL of the HTTP API
      Value: !Sub "https://${ApiGatewayRestApi}.execute-api.${AWS::Region}.amazonaws.com/${sls:stage}"
      Export:
        Name: ${self:service}-${self:provider.stage}-HttpApiUrl
    
    # Usando Fn::Sub para construir la URL (SIN barras invertidas antes de $)
    WebsocketApiUrl:
      Description: URL of the WebSocket API
      Value: !Sub "wss://${WebsocketsApi}.execute-api.${AWS::Region}.amazonaws.com/${sls:stage}"
      Export:
        Name: ${self:service}-${self:provider.stage}-WebsocketApiUrl
    
    ServiceName:
      Description: Nombre del servicio
      Value: ${self:service}
      Export:
        Name: ${self:service}-${self:provider.stage}-ServiceName
    
    Stage:
      Description: Etapa de despliegue
      Value: ${self:provider.stage}
      Export:
        Name: ${self:service}-${self:provider.stage}-Stage
