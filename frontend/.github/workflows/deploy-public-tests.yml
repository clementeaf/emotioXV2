name: 🚀 Deploy Public Tests to S3/CloudFront

on:
  push:
    branches: [main]
    paths:
      - 'public-tests/**'
      - '.github/workflows/deploy-public-tests.yml'
  workflow_dispatch:
    inputs:
      force_deploy:
        description: 'Forzar despliegue completo'
        required: false
        default: 'false'
        type: boolean

env:
  NODE_VERSION: '20'
  AWS_REGION: ${{ secrets.AWS_DEFAULT_REGION }}

jobs:
  deploy:
    name: 🚀 Deploy to S3/CloudFront
    runs-on: ubuntu-latest

    steps:
      - name: 📥 Checkout code
        uses: actions/checkout@v4
        with:
          fetch-depth: 0

      - name: 🟢 Setup Node.js
        uses: actions/setup-node@v4
        with:
          node-version: ${{ env.NODE_VERSION }}
          cache: 'npm'
          cache-dependency-path: package-lock.json

      - name: 📦 Install dependencies
        run: |
          cd public-tests
          npm install --ignore-scripts --prefer-offline --no-audit

      - name: 🧪 Run tests
        run: |
          cd public-tests
          npm run test:ci


      - name: 🏗️ Build application
        run: |
          cd public-tests
          npm run build:ci
        env:
          VITE_API_BASE_URL: ${{ secrets.VITE_API_BASE_URL }}
          VITE_PUBLIC_TESTS_URL: ${{ secrets.VITE_PUBLIC_TESTS_URL }}

      - name: 📋 List build files
        run: |
          echo "📁 Build files:"
          ls -la public-tests/dist/
          echo ""
          echo "📄 index.html content:"
          head -20 public-tests/dist/index.html

      - name: 🔑 Configure AWS credentials
        uses: aws-actions/configure-aws-credentials@v4
        with:
          aws-access-key-id: ${{ secrets.AWS_ACCESS_KEY_ID }}
          aws-secret-access-key: ${{ secrets.AWS_SECRET_ACCESS_KEY }}
          aws-region: ${{ env.AWS_REGION }}

      - name: 🪣 Sync to S3
        run: |
          echo "🔄 Syncing files to S3..."
          aws s3 sync public-tests/dist/ s3://${{ secrets.PUBLIC_TESTS_S3_BUCKET }} \
            --delete \
            --cache-control "max-age=31536000,public" \
            --exclude "*.html" \
            --exclude "*.json"

          echo "📄 Syncing HTML files with no-cache..."
          aws s3 sync public-tests/dist/ s3://${{ secrets.PUBLIC_TESTS_S3_BUCKET }} \
            --delete \
            --cache-control "no-cache,no-store,must-revalidate" \
            --include "*.html" \
            --include "*.json"

      - name: 📊 Upload build info
        run: |
          echo "📊 Creating build info..."
          cat > /tmp/build-info.json << EOF
          {
            "build_time": "$(date -u +%Y-%m-%dT%H:%M:%SZ)",
            "commit": "${{ github.sha }}",
            "branch": "${{ github.ref_name }}",
            "workflow": "${{ github.workflow }}",
            "run_id": "${{ github.run_id }}"
          }
          EOF

          aws s3 cp /tmp/build-info.json s3://${{ secrets.PUBLIC_TESTS_S3_BUCKET }}/build-info.json \
            --cache-control "no-cache,no-store,must-revalidate"

      - name: 🌐 Invalidate CloudFront cache
        run: |
          echo "🔄 Invalidating CloudFront cache..."
          aws cloudfront create-invalidation \
            --distribution-id ${{ secrets.PUBLIC_TESTS_CLOUDFRONT_DISTRIBUTION_ID }} \
            --paths "/*" \
            --region ${{ env.AWS_REGION }}

      - name: 🔍 Verify deployment
        run: |
          echo "🔍 Verificando despliegue..."
          sleep 30  # Esperar a que CloudFront se actualice

          # Obtener dominio de CloudFront
          CLOUDFRONT_DOMAIN=$(aws cloudfront get-distribution \
            --id ${{ secrets.PUBLIC_TESTS_CLOUDFRONT_DISTRIBUTION_ID }} \
            --region ${{ env.AWS_REGION }} \
            --query 'Distribution.DomainName' \
            --output text)

          echo "🌐 CloudFront URL: https://$CLOUDFRONT_DOMAIN"

          # Verificar que el sitio responde
          for i in {1..5}; do
            if curl -f -s "https://$CLOUDFRONT_DOMAIN" > /dev/null; then
              echo "✅ Sitio web accesible"
              break
            else
              echo "⏳ Intento $i: Esperando a que CloudFront se actualice..."
              sleep 10
            fi
          done

      - name: 📝 Update deployment info
        run: |
          echo "📝 Actualizando información de despliegue..."

          # Crear archivo de información de despliegue
          cat > /tmp/deployment-info.json << EOF
          {
            "deployment_time": "$(date -u +%Y-%m-%dT%H:%M:%SZ)",
            "commit": "${{ github.sha }}",
            "branch": "${{ github.ref_name }}",
            "workflow": "${{ github.workflow }}",
            "run_id": "${{ github.run_id }}",
            "environment": "production",
            "platform": "s3-cloudfront",
            "bucket": "${{ secrets.PUBLIC_TESTS_S3_BUCKET }}",
            "distribution_id": "${{ secrets.PUBLIC_TESTS_CLOUDFRONT_DISTRIBUTION_ID }}"
          }
          EOF

          # Subir a S3
          aws s3 cp /tmp/deployment-info.json s3://${{ secrets.PUBLIC_TESTS_S3_BUCKET }}/deployment-info.json \
            --cache-control "no-cache,no-store,must-revalidate"

      - name: 🎉 Deployment summary
        run: |
          echo "🎉 ¡Despliegue completado exitosamente!"
          echo ""
          echo "📊 Resumen del despliegue:"
          echo "  - Commit: ${{ github.sha }}"
          echo "  - Branch: ${{ github.ref_name }}"
          echo "  - Workflow: ${{ github.workflow }}"
          echo "  - Run ID: ${{ github.run_id }}"
          echo "  - Bucket: ${{ secrets.PUBLIC_TESTS_S3_BUCKET }}"
          echo "  - Distribution: ${{ secrets.PUBLIC_TESTS_CLOUDFRONT_DISTRIBUTION_ID }}"
          echo ""
          echo "🌐 URLs:"
          echo "  - S3: https://${{ secrets.PUBLIC_TESTS_S3_BUCKET }}.s3.${{ env.AWS_REGION }}.amazonaws.com"
          echo "  - CloudFront: https://$(aws cloudfront get-distribution --id ${{ secrets.PUBLIC_TESTS_CLOUDFRONT_DISTRIBUTION_ID }} --region ${{ env.AWS_REGION }} --query 'Distribution.DomainName' --output text)"
          echo ""
          echo "📋 Próximos pasos:"
          echo "1. Verifica que el sitio funciona correctamente"
          echo "2. Actualiza los endpoints en el frontend si es necesario"
          echo "3. Configura un dominio personalizado si lo deseas"

      - name: 🚨 Notify on failure
        if: failure()
        run: |
          echo "❌ Despliegue falló"
          echo "🔍 Revisa los logs para más detalles"
          echo "📧 Notifica al equipo de desarrollo"
