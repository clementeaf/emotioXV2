---
description:
globs:
alwaysApply: false
---
# 🧑‍💻 Estándares de Desarrollo React Vite
Estas reglas aplican a todos los proyectos React Vite desarrollados en SmartUp.

## 🏗️ Arquitectura y Estructura del Proyecto

### 📁 Organización de Carpetas
```
src/
├── components/           # Componentes reutilizables
│   ├── ui/              # Componentes de UI atómicos
│   ├── forms/           # Componentes de formularios
│   └── layout/          # Componentes de layout
├── hooks/               # Custom hooks
├── stores/              # Stores de Zustand
├── services/            # Servicios y APIs
├── utils/               # Utilidades y helpers
├── types/               # Tipos TypeScript (si aplica)
├── constants/           # Constantes globales
├── assets/              # Imágenes, iconos, etc.
└── pages/               # Páginas/componentes de ruta
```

### 🧩 Componentización y Modularidad
- **Componentes Atómicos**: Desarrolla componentes granulares y reutilizables
- **Agnosticismo**: Los componentes deben ser agnósticos respecto a propiedades heredadas
- **Responsabilidad Única**: Cada componente debe tener una sola responsabilidad
- **Máximo 200 líneas por componente** (preferentemente menos de 150)
- **Separación de Lógica**: Extrae lógica compleja a custom hooks

## 🧹 Clean Code y Convenciones

### 📝 Nomenclatura
- **Componentes**: `PascalCase` (ej: `UserProfile`, `ProductCard`)
- **Hooks**: `camelCase` con prefijo `use` (ej: `useUserData`, `useProductList`)
- **Funciones/Utilidades**: `camelCase` (ej: `formatCurrency`, `validateEmail`)
- **Constantes**: `UPPER_SNAKE_CASE` (ej: `API_ENDPOINTS`, `DEFAULT_CONFIG`)
- **Archivos**: `kebab-case` (ej: `user-profile.jsx`, `product-card.jsx`)

### 🔧 Estructura de Componentes
```jsx
// ✅ Estructura recomendada
import React from 'react'
import PropTypes from 'prop-types'
import { useCustomHook } from '../hooks/useCustomHook'
import { formatData } from '../utils/formatters'

const ComponentName = ({ prop1, prop2, children }) => {
  const { data, loading } = useCustomHook()

  if (loading) return <LoadingSpinner />

  return (
    <div className="component-container">
      {children}
    </div>
  )
}

ComponentName.propTypes = {
  prop1: PropTypes.string.isRequired,
  prop2: PropTypes.number,
  children: PropTypes.node
}

ComponentName.defaultProps = {
  prop2: 0
}

export default ComponentName
```

## 🎣 Gestión de Estado

### 📊 Zustand Stores
- **Un store por dominio** (ej: `userStore`, `productStore`)
- **Acciones claras y descriptivas**
- **Separación de estado y lógica de negocio**

```jsx
// ✅ Ejemplo de store bien estructurado
import { createStore } from 'zustand'

const useUserStore = createStore((set, get) => ({
  // Estado
  user: null,
  isLoading: false,
  error: null,

  // Acciones
  setUser: (user) => set({ user, error: null }),
  setLoading: (isLoading) => set({ isLoading }),
  setError: (error) => set({ error, isLoading: false }),

  // Acciones complejas
  loginUser: async (credentials) => {
    set({ isLoading: true, error: null })
    try {
      const user = await authService.login(credentials)
      set({ user, isLoading: false })
    } catch (error) {
      set({ error: error.message, isLoading: false })
    }
  }
}))
```

### 🎯 Custom Hooks
- **Extrae lógica compleja** de componentes a custom hooks
- **Prefijo `use`** obligatorio
- **Retorna objetos estructurados** con estado y acciones

```jsx
// ✅ Custom hook bien estructurado
const useProductList = (categoryId) => {
  const [products, setProducts] = useState([])
  const [loading, setLoading] = useState(false)
  const [error, setError] = useState(null)

  const fetchProducts = useCallback(async () => {
    setLoading(true)
    try {
      const data = await productService.getByCategory(categoryId)
      setProducts(data)
    } catch (err) {
      setError(err.message)
    } finally {
      setLoading(false)
    }
  }, [categoryId])

  useEffect(() => {
    fetchProducts()
  }, [fetchProducts])

  return {
    products,
    loading,
    error,
    refetch: fetchProducts
  }
}
```

## 🌐 Gestión de Datos y APIs

### 📡 TanStack Query + Alova
- **Usa TanStack Query** para gestión de estado del servidor
- **Implementa Alova** para peticiones HTTP (evita fetch nativo)
- **Configuración centralizada** de queries

```jsx
// ✅ Configuración de TanStack Query
const queryClient = new QueryClient({
  defaultOptions: {
    queries: {
      staleTime: 5 * 60 * 1000, // 5 minutos
      cacheTime: 10 * 60 * 1000, // 10 minutos
      retry: 3,
      refetchOnWindowFocus: false
    }
  }
})

// ✅ Uso de queries
const useProducts = (categoryId) => {
  return useQuery({
    queryKey: ['products', categoryId],
    queryFn: () => productService.getByCategory(categoryId),
    enabled: !!categoryId
  })
}
```

### 🔄 Optimización de Rendimiento
- **React.memo** para componentes que reciben props estables
- **useMemo** para cálculos costosos
- **useCallback** para funciones que se pasan como props
- **Lazy loading** para componentes grandes

## 🎨 Estilos y UI

### 🎯 Tailwind CSS
- **Utiliza clases de Tailwind** de manera consistente
- **Crea componentes de UI atómicos** para elementos reutilizables
- **Evita estilos inline** y CSS personalizado innecesario
- **Usa variables CSS** para temas y colores

```jsx
// ✅ Componente UI atómico
const Button = ({
  variant = 'primary',
  size = 'md',
  children,
  ...props
}) => {
  const baseClasses = 'font-medium rounded-lg transition-colors focus:outline-none focus:ring-2'

  const variants = {
    primary: 'bg-blue-600 hover:bg-blue-700 text-white focus:ring-blue-500',
    secondary: 'bg-gray-200 hover:bg-gray-300 text-gray-800 focus:ring-gray-500',
    danger: 'bg-red-600 hover:bg-red-700 text-white focus:ring-red-500'
  }

  const sizes = {
    sm: 'px-3 py-1.5 text-sm',
    md: 'px-4 py-2 text-base',
    lg: 'px-6 py-3 text-lg'
  }

  return (
    <button
      className={`${baseClasses} ${variants[variant]} ${sizes[size]}`}
      {...props}
    >
      {children}
    </button>
  )
}
```

## 🧪 Testing y Calidad

### ✅ Tests Unitarios
- **Cobertura mínima del 80%** para lógica de negocio
- **Tests para custom hooks** y utilidades
- **Tests de componentes** con React Testing Library
- **Mocks apropiados** para servicios externos

### 🔍 Code Quality
- **ESLint** configurado con reglas estrictas
- **Prettier** para formateo consistente
- **Husky** para pre-commit hooks
- **TypeScript** recomendado para proyectos grandes

## 📚 Documentación

### 📖 README y Documentación
- **README actualizado** con cada nueva feature
- **Documentación de componentes** con Storybook (recomendado)
- **Comentarios JSDoc** para funciones complejas
- **Ejemplos de uso** en documentación

### 🏷️ PropTypes y TypeScript
```jsx
// ✅ PropTypes bien definidos
ComponentName.propTypes = {
  // Props requeridas
  title: PropTypes.string.isRequired,

  // Props opcionales con valores por defecto
  variant: PropTypes.oneOf(['primary', 'secondary', 'danger']),
  size: PropTypes.oneOf(['sm', 'md', 'lg']),

  // Funciones
  onSubmit: PropTypes.func,

  // Elementos React
  children: PropTypes.node,

  // Arrays y objetos
  items: PropTypes.arrayOf(PropTypes.shape({
    id: PropTypes.string.isRequired,
    name: PropTypes.string.isRequired
  }))
}
```

## 🚀 Patrones de Diseño

### 🎭 Higher-Order Components (HOC)
- **Usa HOCs** para lógica transversal (auth, loading, error handling)
- **Composición sobre herencia**
- **Mantén HOCs simples** y enfocados

```jsx
// ✅ HOC bien estructurado
const withErrorBoundary = (WrappedComponent) => {
  return function ErrorBoundaryWrapper(props) {
    const [hasError, setHasError] = useState(false)

    if (hasError) {
      return <ErrorFallback onRetry={() => setHasError(false)} />
    }

    return (
      <ErrorBoundary onError={() => setHasError(true)}>
        <WrappedComponent {...props} />
      </ErrorBoundary>
    )
  }
}
```

### 🔄 Render Props y Compound Components
- **Usa render props** para lógica reutilizable
- **Compound components** para componentes complejos
- **Flexibilidad en la API** de componentes

## 🔒 Seguridad y Mejores Prácticas

### 🛡️ Seguridad
- **Validación de inputs** en el frontend
- **Sanitización de datos** antes de renderizar
- **HTTPS obligatorio** en producción
- **Headers de seguridad** configurados

### ⚡ Performance
- **Code splitting** con React.lazy
- **Bundle analysis** regular
- **Optimización de imágenes** y assets
- **Caching estratégico** con TanStack Query

## 📋 Checklist de Revisión

### ✅ Antes de hacer commit:
- [ ] Código sigue convenciones de nomenclatura
- [ ] Componentes no exceden 200 líneas
- [ ] Custom hooks extraídos para lógica compleja
- [ ] Tests escritos para nueva funcionalidad
- [ ] PropTypes/TypeScript definidos
- [ ] README actualizado
- [ ] No hay console.log o código de debug
- [ ] Performance optimizada (memo, useMemo, useCallback)
- [ ] Accesibilidad considerada
- [ ] Responsive design implementado

### 🚨 Anti-patrones a Evitar:
- ❌ Componentes monolíticos con múltiples responsabilidades
- ❌ Uso excesivo de useState y useEffect en un componente
- ❌ Fetch nativo sin librerías especializadas
- ❌ Lógica de negocio en componentes
- ❌ Props drilling excesivo
- ❌ Re-renders innecesarios
- ❌ Dependencias circulares
- ❌ Código duplicado

---

**Recuerda**: La calidad del código es responsabilidad de todo el equipo. Revisa y refactoriza constantemente para mantener estándares altos.
