#!/usr/bin/env node

/**
 * Test final para validar el modal de consentimiento GDPR
 */

import { chromium } from 'playwright';

const TEST_CONFIG = {
  localUrl: 'http://localhost:5173',
  timeout: 30000,
  headless: false
};

class FinalGDPRTest {
  constructor() {
    this.browser = null;
    this.page = null;
    this.results = {
      passed: 0,
      failed: 0,
      total: 0,
      details: []
    };
  }

  async init() {
    console.log('üöÄ Iniciando test final de GDPR...');
    this.browser = await chromium.launch({
      headless: TEST_CONFIG.headless,
      args: ['--disable-web-security']
    });

    const context = await this.browser.newContext({
      permissions: ['geolocation'],
      geolocation: { latitude: 40.4168, longitude: -3.7038 },
      locale: 'es-ES'
    });

    this.page = await context.newPage();
  }

  async cleanup() {
    if (this.browser) {
      await this.browser.close();
    }
  }

  async runTest(testName, testFunction) {
    this.results.total++;
    console.log(`\nüìã Ejecutando: ${testName}`);

    try {
      await testFunction();
      this.results.passed++;
      console.log(`‚úÖ ${testName} - PAS√ì`);
      this.results.details.push({ test: testName, status: 'PASSED' });
    } catch (error) {
      this.results.failed++;
      console.log(`‚ùå ${testName} - FALL√ì: ${error.message}`);
      this.results.details.push({ test: testName, status: 'FAILED', error: error.message });
    }
  }

  async testPageLoads() {
    await this.page.goto(`${TEST_CONFIG.localUrl}/gdpr-test`);
    await this.page.waitForTimeout(3000);

    // Verificar que la p√°gina se carga
    const title = await this.page.locator('text=Test de Consentimiento GDPR');
    if (!await title.isVisible()) {
      throw new Error('P√°gina de test GDPR no se carg√≥ correctamente');
    }

    console.log('‚úÖ P√°gina cargada correctamente');
  }

  async testComponentExists() {
    // Verificar que el componente de ejemplo existe
    const component = await this.page.locator('text=Geolocalizaci√≥n con Consentimiento GDPR');
    if (!await component.isVisible()) {
      throw new Error('Componente GDPRGeolocationExample no se renderiz√≥');
    }

    console.log('‚úÖ Componente GDPRGeolocationExample encontrado');
  }

  async testWaitForGeolocation() {
    // Esperar a que termine la carga de geolocalizaci√≥n
    console.log('‚è≥ Esperando a que termine la carga de geolocalizaci√≥n...');

    // Esperar hasta que el bot√≥n est√© habilitado o aparezca un error
    await this.page.waitForFunction(() => {
      const button = document.querySelector('[data-testid="request-location-button"]');
      const loadingText = document.querySelector('[data-testid="is-loading"]');
      const errorText = document.querySelector('[data-testid="geolocation-error"]');

      // Si hay error, continuar
      if (errorText && errorText.textContent) {
        return true;
      }

      // Si no est√° cargando, continuar
      if (loadingText && loadingText.textContent === 'No') {
        return true;
      }

      // Si el bot√≥n est√° habilitado, continuar
      if (button && !button.disabled) {
        return true;
      }

      return false;
    }, { timeout: 15000 });

    console.log('‚úÖ Geolocalizaci√≥n termin√≥ de cargar');
  }

  async testButtonsAreEnabled() {
    // Verificar que los botones est√°n habilitados
    const requestButton = await this.page.locator('[data-testid="request-location-button"]');
    const resetButton = await this.page.locator('[data-testid="reset-button"]');

    if (!await requestButton.isVisible()) {
      throw new Error('Bot√≥n de solicitar ubicaci√≥n no encontrado');
    }

    // Verificar si el bot√≥n est√° habilitado
    const isDisabled = await requestButton.isDisabled();
    if (isDisabled) {
      console.log('‚ö†Ô∏è Bot√≥n est√° deshabilitado, verificando estado...');

      // Verificar si hay error de geolocalizaci√≥n
      const errorElement = await this.page.locator('[data-testid="geolocation-error"]');
      if (await errorElement.isVisible()) {
        console.log('‚úÖ Error de geolocalizaci√≥n detectado (esperado en test)');
        return;
      }

      throw new Error('Bot√≥n de solicitar ubicaci√≥n est√° deshabilitado sin raz√≥n aparente');
    }

    console.log('‚úÖ Botones est√°n habilitados');
  }

  async testManualModalTrigger() {
    // Limpiar localStorage primero
    await this.page.evaluate(() => {
      localStorage.removeItem('emotio_gdpr_consent');
    });

    // Verificar si el bot√≥n est√° habilitado
    const requestButton = await this.page.locator('[data-testid="request-location-button"]');
    const isDisabled = await requestButton.isDisabled();

    if (isDisabled) {
      console.log('‚ö†Ô∏è Bot√≥n deshabilitado, usando reset para limpiar estado...');
      await this.page.click('[data-testid="reset-button"]');
      await this.page.waitForTimeout(2000);
    }

    // Hacer clic en el bot√≥n de solicitar ubicaci√≥n
    await this.page.click('[data-testid="request-location-button"]');
    await this.page.waitForTimeout(3000);

    // Verificar que el modal aparece
    const modal = await this.page.locator('[data-testid="gdpr-modal"]');
    if (!await modal.isVisible()) {
      throw new Error('Modal GDPR no apareci√≥ despu√©s de hacer clic en solicitar ubicaci√≥n');
    }

    console.log('‚úÖ Modal GDPR apareci√≥ correctamente');
  }

  async testModalContent() {
    // Verificar contenido del modal
    const modalTitle = await this.page.locator('[data-testid="gdpr-modal-title"]');
    const acceptButton = await this.page.locator('[data-testid="gdpr-modal-accept"]');
    const rejectButton = await this.page.locator('[data-testid="gdpr-modal-reject"]');

    if (!await modalTitle.isVisible()) {
      throw new Error('T√≠tulo del modal no encontrado');
    }

    if (!await acceptButton.isVisible()) {
      throw new Error('Bot√≥n de aceptar no encontrado');
    }

    if (!await rejectButton.isVisible()) {
      throw new Error('Bot√≥n de rechazar no encontrado');
    }

    console.log('‚úÖ Contenido del modal GDPR completo');
  }

  async testAcceptConsent() {
    // Aceptar consentimiento
    await this.page.click('[data-testid="gdpr-modal-accept"]');
    await this.page.waitForTimeout(3000);

    // Verificar que el modal se cierra
    const modal = await this.page.locator('[data-testid="gdpr-modal"]');
    if (await modal.isVisible()) {
      throw new Error('Modal no se cerr√≥ despu√©s de aceptar');
    }

    // Verificar localStorage
    const localStorage = await this.page.evaluate(() => {
      return localStorage.getItem('emotio_gdpr_consent');
    });

    if (!localStorage) {
      throw new Error('Consentimiento no se guard√≥ en localStorage');
    }

    const consentData = JSON.parse(localStorage);
    if (!consentData.hasConsented) {
      throw new Error('Estado de consentimiento incorrecto');
    }

    console.log('‚úÖ Consentimiento aceptado y guardado correctamente');
  }

  async testRejectConsent() {
    // Limpiar localStorage
    await this.page.evaluate(() => {
      localStorage.removeItem('emotio_gdpr_consent');
    });

    // Resetear estado
    await this.page.click('[data-testid="reset-button"]');
    await this.page.waitForTimeout(2000);

    // Hacer clic en solicitar ubicaci√≥n para mostrar modal
    await this.page.click('[data-testid="request-location-button"]');
    await this.page.waitForTimeout(3000);

    // Rechazar consentimiento
    await this.page.click('[data-testid="gdpr-modal-reject"]');
    await this.page.waitForTimeout(3000);

    // Verificar localStorage
    const localStorage = await this.page.evaluate(() => {
      return localStorage.getItem('emotio_gdpr_consent');
    });

    if (!localStorage) {
      throw new Error('Rechazo no se guard√≥ en localStorage');
    }

    const consentData = JSON.parse(localStorage);
    if (!consentData.hasRejected) {
      throw new Error('Estado de rechazo incorrecto');
    }

    console.log('‚úÖ Consentimiento rechazado y guardado correctamente');
  }

  async testPersistence() {
    // Verificar que el modal no aparece despu√©s de haber consentido
    await this.page.reload();
    await this.page.waitForTimeout(3000);

    // Verificar que el modal no aparece
    const modal = await this.page.locator('[data-testid="gdpr-modal"]');
    if (await modal.isVisible()) {
      throw new Error('Modal aparece despu√©s de haber consentido');
    }

    // Verificar que se puede usar geolocalizaci√≥n
    const canUseGeolocation = await this.page.evaluate(() => {
      const consentElement = document.querySelector('[data-testid="can-use-geolocation"]');
      return consentElement ? consentElement.textContent.includes('S√≠') : false;
    });

    if (!canUseGeolocation) {
      throw new Error('No se puede usar geolocalizaci√≥n despu√©s de consentir');
    }

    console.log('‚úÖ Persistencia del consentimiento funciona correctamente');
  }

  async runAllTests() {
    try {
      await this.init();

      await this.runTest('P√°gina se carga correctamente', () => this.testPageLoads());
      await this.runTest('Componente existe', () => this.testComponentExists());
      await this.runTest('Esperar carga de geolocalizaci√≥n', () => this.testWaitForGeolocation());
      await this.runTest('Botones est√°n habilitados', () => this.testButtonsAreEnabled());
      await this.runTest('Modal aparece manualmente', () => this.testManualModalTrigger());
      await this.runTest('Contenido del modal completo', () => this.testModalContent());
      await this.runTest('Aceptar consentimiento funciona', () => this.testAcceptConsent());
      await this.runTest('Rechazar consentimiento funciona', () => this.testRejectConsent());
      await this.runTest('Persistencia del consentimiento', () => this.testPersistence());

      this.printResults();
    } catch (error) {
      console.error('‚ùå Error durante la ejecuci√≥n de tests:', error);
    } finally {
      await this.cleanup();
    }
  }

  printResults() {
    console.log('\n' + '='.repeat(60));
    console.log('üìä RESULTADOS DEL TEST FINAL DE GDPR');
    console.log('='.repeat(60));
    console.log(`‚úÖ Pasaron: ${this.results.passed}`);
    console.log(`‚ùå Fallaron: ${this.results.failed}`);
    console.log(`üìã Total: ${this.results.total}`);
    console.log(`üìà Porcentaje de √©xito: ${((this.results.passed / this.results.total) * 100).toFixed(1)}%`);

    if (this.results.failed > 0) {
      console.log('\nüîç Detalles de fallos:');
      this.results.details
        .filter(detail => detail.status === 'FAILED')
        .forEach(detail => {
          console.log(`  ‚ùå ${detail.test}: ${detail.error}`);
        });
    }

    console.log('\n' + '='.repeat(60));
  }
}

// Ejecutar tests
async function main() {
  const test = new FinalGDPRTest();
  await test.runAllTests();
}

if (import.meta.url === `file://${process.argv[1]}`) {
  main().catch(console.error);
}
