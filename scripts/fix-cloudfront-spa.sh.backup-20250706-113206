#!/bin/bash

# üîß EmotioXV2 - Fix CloudFront SPA Configuration
# Script para corregir problemas de navegaci√≥n en CloudFront

set -e

# Colores para output
RED='\033[0;31m'
GREEN='\033[0;32m'
YELLOW='\033[1;33m'
BLUE='\033[0;34m'
NC='\033[0m'

# Funciones de logging
log_info() { echo -e "${BLUE}[INFO]${NC} $1"; }
log_success() { echo -e "${GREEN}[SUCCESS]${NC} $1"; }
log_warning() { echo -e "${YELLOW}[WARNING]${NC} $1"; }
log_error() { echo -e "${RED}[ERROR]${NC} $1"; }

# Configuraci√≥n
BUCKET_NAME="emotioxv2-frontend-bucket"
CLOUDFRONT_DIST_ID="E3MCIWNMF6ES2R"
REGION="us-east-1"
CONFIG_DIR="config/aws"

main() {
    echo ""
    log_info "üîß Corrigiendo configuraci√≥n de CloudFront para SPA..."
    echo ""

    # Crear directorio de configuraci√≥n si no existe
    mkdir -p "$CONFIG_DIR"

    # Verificar dependencias
    check_dependencies

    # Descargar configuraci√≥n actual
    download_current_config

    # Generar nueva configuraci√≥n optimizada
    generate_optimized_config

    # Aplicar nueva configuraci√≥n
    apply_new_config

    # Configurar S3 para SPA
    configure_s3_spa

    # Invalidar cache
    invalidate_cache

    # Verificar configuraci√≥n
    verify_configuration

    echo ""
    log_success "‚úÖ Configuraci√≥n de SPA corregida exitosamente!"
    echo ""
}

check_dependencies() {
    log_info "Verificando dependencias..."

    if ! command -v aws &> /dev/null; then
        log_error "AWS CLI no est√° instalado"
        exit 1
    fi

    if ! command -v jq &> /dev/null; then
        log_error "jq no est√° instalado. Instala con: brew install jq"
        exit 1
    fi

    if ! aws sts get-caller-identity &> /dev/null; then
        log_error "AWS CLI no est√° configurado correctamente"
        exit 1
    fi

    log_success "Todas las dependencias est√°n disponibles"
}

download_current_config() {
    log_info "Descargando configuraci√≥n actual de CloudFront..."
    
    aws cloudfront get-distribution-config --id "$CLOUDFRONT_DIST_ID" > "$CONFIG_DIR/dist-config-raw.json"
    ETAG=$(cat "$CONFIG_DIR/dist-config-raw.json" | jq -r '.ETag')
    
    log_success "Configuraci√≥n descargada (ETag: $ETAG)"
}

generate_optimized_config() {
    log_info "Generando configuraci√≥n optimizada para SPA..."

    # Extraer DistributionConfig y aplicar optimizaciones para SPA
    cat "$CONFIG_DIR/dist-config-raw.json" | jq --tab '.DistributionConfig |
    
    # Configurar Custom Error Responses para SPA
    (.CustomErrorResponses.Items) |= [
      {
        "ErrorCode": 403,
        "ResponsePagePath": "/index.html",
        "ResponseCode": "200",
        "ErrorCachingMinTTL": 0
      },
      {
        "ErrorCode": 404,
        "ResponsePagePath": "/index.html", 
        "ResponseCode": "200",
        "ErrorCachingMinTTL": 0
      }
    ] |
    (.CustomErrorResponses.Quantity) |= 2 |
    
    # Optimizar Default Cache Behavior para HTML y rutas SPA
    (.DefaultCacheBehavior.MinTTL) |= 0 |
    (.DefaultCacheBehavior.DefaultTTL) |= 0 |
    (.DefaultCacheBehavior.MaxTTL) |= 86400 |
    (.DefaultCacheBehavior.Compress) |= true |
    (.DefaultCacheBehavior.SmoothStreaming) |= false |
    (.DefaultCacheBehavior.ForwardedValues.QueryString) |= true |
    
    # Asegurar que est√° habilitado
    (.Enabled) |= true |
    
    # Mejorar configuraci√≥n de compresi√≥n
    (.DefaultRootObject) |= "index.html"' > "$CONFIG_DIR/dist-config-spa-optimized.json"

    log_success "Configuraci√≥n optimizada generada"
}

apply_new_config() {
    log_info "Aplicando nueva configuraci√≥n a CloudFront..."
    
    aws cloudfront update-distribution \
        --id "$CLOUDFRONT_DIST_ID" \
        --if-match "$ETAG" \
        --distribution-config "file://$CONFIG_DIR/dist-config-spa-optimized.json"
    
    log_success "Nueva configuraci√≥n aplicada a CloudFront"
    log_warning "Los cambios en CloudFront pueden tardar hasta 15 minutos en propagarse"
}

configure_s3_spa() {
    log_info "Configurando S3 para SPA..."
    
    # Configurar S3 website hosting
    aws s3 website "s3://$BUCKET_NAME" \
        --index-document index.html \
        --error-document index.html
    
    log_success "S3 configurado para SPA"
}

invalidate_cache() {
    log_info "Invalidando cach√© de CloudFront..."
    
    aws cloudfront create-invalidation \
        --distribution-id "$CLOUDFRONT_DIST_ID" \
        --paths "/*" \
        --no-cli-pager
    
    log_success "Cach√© invalidada"
}

verify_configuration() {
    log_info "Verificando configuraci√≥n..."
    
    # Verificar que CloudFront est√° habilitado
    ENABLED=$(aws cloudfront get-distribution --id "$CLOUDFRONT_DIST_ID" --query "Distribution.DistributionConfig.Enabled")
    if [ "$ENABLED" = "true" ]; then
        log_success "CloudFront distribution est√° habilitada"
    else
        log_error "CloudFront distribution est√° deshabilitada"
    fi
    
    # Verificar Custom Error Responses
    ERROR_RESPONSES=$(aws cloudfront get-distribution --id "$CLOUDFRONT_DIST_ID" --query "Distribution.DistributionConfig.CustomErrorResponses.Quantity")
    if [ "$ERROR_RESPONSES" -eq 2 ]; then
        log_success "Custom Error Responses configurados correctamente"
    else
        log_warning "Custom Error Responses: encontrados $ERROR_RESPONSES (esperados: 2)"
    fi
    
    echo ""
    log_info "üìã URLs de verificaci√≥n:"
    echo "  üåê CloudFront: https://d2s9nr0bm47yl1.cloudfront.net/"
    echo "  üîó Dashboard: https://d2s9nr0bm47yl1.cloudfront.net/dashboard/"
    echo "  üîó Login: https://d2s9nr0bm47yl1.cloudfront.net/login/"
    echo ""
    log_info "üß™ Prueba directa de rutas SPA:"
    echo "  curl -s -o /dev/null -w 'Status: %{http_code}' https://d2s9nr0bm47yl1.cloudfront.net/dashboard/"
    echo "  curl -s -o /dev/null -w 'Status: %{http_code}' https://d2s9nr0bm47yl1.cloudfront.net/research/123/"
    echo ""
}

# Ejecutar funci√≥n principal
main
