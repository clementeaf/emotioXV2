#!/bin/bash

# üîß EmotioXV2 - Fix Urgente para Public-Tests
# Corrige el ID de CloudFront incorrecto en scripts de deployment

set -e

# Colores para output
RED='\033[0;31m'
GREEN='\033[0;32m'
YELLOW='\033[1;33m'
BLUE='\033[0;34m'
NC='\033[0m'

# Funciones de logging
log_info() { echo -e "${BLUE}[INFO]${NC} $1"; }
log_success() { echo -e "${GREEN}[SUCCESS]${NC} $1"; }
log_warning() { echo -e "${YELLOW}[WARNING]${NC} $1"; }
log_error() { echo -e "${RED}[ERROR]${NC} $1"; }

# IDs correcto e incorrecto
WRONG_ID="E3MCIWNMF6ES2R"
CORRECT_ID="E2X8HCFI5FM1EC"

main() {
    echo ""
    log_info "üîß Corrigiendo ID de CloudFront incorrecto en scripts de public-tests..."
    echo ""

    # Buscar archivos con ID incorrecto
    find_and_fix_files

    # Verificar configuraci√≥n actual
    verify_cloudfront_config

    # Test del script corregido
    test_deployment_script

    echo ""
    log_success "‚úÖ Fix urgente completado!"
    echo ""
}

find_and_fix_files() {
    log_info "Buscando archivos con ID incorrecto..."

    # Buscar archivos que contengan el ID incorrecto
    files_with_wrong_id=$(grep -r "$WRONG_ID" scripts/ || true)
    
    if [ -z "$files_with_wrong_id" ]; then
        log_warning "No se encontraron archivos con ID incorrecto"
        return
    fi

    echo ""
    log_info "üìÅ Archivos que requieren correcci√≥n:"
    echo "$files_with_wrong_id"
    echo ""

    # Corregir cada archivo encontrado
    while IFS= read -r line; do
        file=$(echo "$line" | cut -d: -f1)
        if [ -f "$file" ]; then
            log_info "Corrigiendo: $file"
            
            # Crear backup
            cp "$file" "$file.backup-$(date +%Y%m%d-%H%M%S)"
            
            # Reemplazar ID incorrecto por correcto
            sed -i.tmp "s/$WRONG_ID/$CORRECT_ID/g" "$file"
            rm "$file.tmp"
            
            log_success "‚úì $file corregido"
        fi
    done <<< "$(grep -l "$WRONG_ID" scripts/* 2>/dev/null || true)"
}

verify_cloudfront_config() {
    log_info "Verificando configuraci√≥n de CloudFront..."

    # Verificar que el ID correcto existe y est√° activo
    status=$(aws cloudfront get-distribution --id "$CORRECT_ID" --query "Distribution.Status" --output text 2>/dev/null || echo "ERROR")
    
    if [ "$status" = "ERROR" ]; then
        log_error "‚ùå No se puede acceder a la distribuci√≥n $CORRECT_ID"
        exit 1
    elif [ "$status" = "Deployed" ]; then
        log_success "‚úÖ CloudFront Distribution $CORRECT_ID est√° activa"
    else
        log_warning "‚ö†Ô∏è CloudFront Distribution $CORRECT_ID est√° en estado: $status"
    fi

    # Verificar URL de public-tests
    log_info "Verificando URL de public-tests..."
    url_status=$(curl -s -o /dev/null -w "%{http_code}" "https://d2zt8ia21te5mv.cloudfront.net/" || echo "ERROR")
    
    if [ "$url_status" = "200" ]; then
        log_success "‚úÖ Public-tests responde correctamente (200)"
    else
        log_warning "‚ö†Ô∏è Public-tests responde con status: $url_status"
    fi
}

test_deployment_script() {
    log_info "Verificando script de deployment corregido..."

    deploy_script="scripts/deploy/deploy-public-tests.sh"
    
    if [ -f "$deploy_script" ]; then
        # Verificar que el script ahora tiene el ID correcto
        if grep -q "$CORRECT_ID" "$deploy_script"; then
            log_success "‚úÖ Script de deployment tiene el ID correcto"
        else
            log_error "‚ùå Script de deployment a√∫n tiene problemas"
            return 1
        fi

        # Verificar sintaxis del script
        if bash -n "$deploy_script"; then
            log_success "‚úÖ Sintaxis del script es v√°lida"
        else
            log_error "‚ùå Script tiene errores de sintaxis"
            return 1
        fi
    else
        log_warning "‚ö†Ô∏è Script de deployment no encontrado"
    fi
}

show_summary() {
    echo ""
    log_info "üìã Resumen de correcciones aplicadas:"
    echo ""
    echo "üîß **ID Corregido:**"
    echo "  Antes: $WRONG_ID (‚ùå Frontend)"
    echo "  Ahora: $CORRECT_ID (‚úÖ Public-tests)"
    echo ""
    echo "üìÅ **Archivos corregidos:**"
    ls -la scripts/*.backup-* 2>/dev/null | wc -l | xargs echo "  Backups creados:"
    echo ""
    echo "üåê **URLs verificadas:**"
    echo "  Public-tests: https://d2zt8ia21te5mv.cloudfront.net/"
    echo "  CloudFront ID: $CORRECT_ID"
    echo ""
    echo "‚úÖ **Pr√≥ximos pasos:**"
    echo "  1. Test deployment: ./scripts/deploy/deploy-public-tests.sh"
    echo "  2. Considerar migraci√≥n a Amplify para mejor CI/CD"
    echo ""
}

# Ejecutar funci√≥n principal
main
show_summary
